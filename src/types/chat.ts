// Chat System Types\n// Data models for real-time chat and feedback system\n\nexport type MessageType = 'text' | 'image' | 'file' | 'system' | 'quick_reply' | 'form';\nexport type MessageStatus = 'sending' | 'sent' | 'delivered' | 'read' | 'failed';\nexport type ConversationStatus = 'new' | 'open' | 'waiting' | 'resolved' | 'closed';\nexport type ParticipantRole = 'user' | 'agent' | 'system' | 'bot';\nexport type ChannelType = 'app' | 'email' | 'telegram' | 'messenger' | 'webhook';\n\n// Message interface\nexport interface ChatMessage {\n  id: string;\n  conversationId: string;\n  senderId: string;\n  senderName: string;\n  senderRole: ParticipantRole;\n  \n  type: MessageType;\n  content: string;\n  metadata?: MessageMetadata;\n  \n  status: MessageStatus;\n  timestamp: string; // ISO string\n  editedAt?: string;\n  \n  // Channel information\n  channel: ChannelType;\n  channelMessageId?: string; // External message ID\n  \n  // Threading\n  replyToId?: string;\n  threadId?: string;\n  \n  // Reactions and interactions\n  reactions?: MessageReaction[];\n  readBy?: MessageRead[];\n}\n\n// Message metadata for different types\nexport interface MessageMetadata {\n  // File/Image metadata\n  fileName?: string;\n  fileSize?: number;\n  mimeType?: string;\n  fileUrl?: string;\n  thumbnailUrl?: string;\n  \n  // Quick reply metadata\n  quickReplies?: QuickReply[];\n  \n  // Form metadata\n  formFields?: FormField[];\n  formSubmission?: Record<string, any>;\n  \n  // System message metadata\n  systemAction?: string;\n  systemData?: Record<string, any>;\n  \n  // Rich content\n  richContent?: RichContent;\n}\n\n// Quick reply options\nexport interface QuickReply {\n  id: string;\n  text: string;\n  value: string;\n  icon?: string;\n}\n\n// Form field definition\nexport interface FormField {\n  id: string;\n  type: 'text' | 'email' | 'phone' | 'select' | 'textarea' | 'checkbox';\n  label: string;\n  placeholder?: string;\n  required: boolean;\n  options?: { value: string; label: string }[];\n  validation?: {\n    pattern?: string;\n    minLength?: number;\n    maxLength?: number;\n  };\n}\n\n// Rich content for enhanced messages\nexport interface RichContent {\n  title?: string;\n  subtitle?: string;\n  imageUrl?: string;\n  buttons?: ContentButton[];\n  cards?: ContentCard[];\n}\n\nexport interface ContentButton {\n  text: string;\n  action: 'url' | 'postback' | 'call';\n  value: string;\n}\n\nexport interface ContentCard {\n  title: string;\n  subtitle?: string;\n  imageUrl?: string;\n  buttons?: ContentButton[];\n}\n\n// Message reactions\nexport interface MessageReaction {\n  emoji: string;\n  userId: string;\n  userName: string;\n  timestamp: string;\n}\n\n// Message read status\nexport interface MessageRead {\n  userId: string;\n  userName: string;\n  timestamp: string;\n}\n\n// Conversation interface\nexport interface Conversation {\n  id: string;\n  title: string;\n  description?: string;\n  \n  status: ConversationStatus;\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  category?: string;\n  tags: string[];\n  \n  // Participants\n  participants: Participant[];\n  assignedAgentId?: string;\n  \n  // Channels\n  channels: ConversationChannel[];\n  primaryChannel: ChannelType;\n  \n  // Metadata\n  userInfo?: UserInfo;\n  context?: ConversationContext;\n  \n  // Timestamps\n  createdAt: string;\n  updatedAt: string;\n  lastMessageAt?: string;\n  resolvedAt?: string;\n  closedAt?: string;\n  \n  // Metrics\n  messageCount: number;\n  responseTime?: number; // Average response time in seconds\n  satisfactionRating?: number; // 1-5 stars\n  satisfactionFeedback?: string;\n}\n\n// Conversation participant\nexport interface Participant {\n  id: string;\n  name: string;\n  email?: string;\n  role: ParticipantRole;\n  avatar?: string;\n  isOnline: boolean;\n  lastSeen?: string;\n  \n  // Channel-specific info\n  channelInfo?: Record<ChannelType, any>;\n}\n\n// Channel configuration for conversation\nexport interface ConversationChannel {\n  type: ChannelType;\n  enabled: boolean;\n  config: ChannelConfig;\n  lastSyncAt?: string;\n  syncStatus: 'synced' | 'pending' | 'error';\n}\n\n// Channel-specific configuration\nexport interface ChannelConfig {\n  // Email config\n  emailAddress?: string;\n  emailSubject?: string;\n  \n  // Telegram config\n  telegramChatId?: string;\n  telegramBotToken?: string;\n  \n  // Messenger config\n  messengerPageId?: string;\n  messengerUserId?: string;\n  \n  // Webhook config\n  webhookUrl?: string;\n  webhookSecret?: string;\n}\n\n// User information\nexport interface UserInfo {\n  userId?: string;\n  email?: string;\n  name?: string;\n  phone?: string;\n  timezone?: string;\n  language?: string;\n  \n  // App-specific info\n  appVersion?: string;\n  platform?: string;\n  deviceInfo?: string;\n  \n  // Learning context\n  currentLevel?: string;\n  studyLanguage?: string;\n  learningGoals?: string[];\n}\n\n// Conversation context\nexport interface ConversationContext {\n  // Page/feature context\n  currentPage?: string;\n  currentFeature?: string;\n  userAction?: string;\n  \n  // Error context\n  errorCode?: string;\n  errorMessage?: string;\n  stackTrace?: string;\n  \n  // Learning context\n  currentDeck?: string;\n  currentQuestion?: string;\n  studySession?: string;\n  \n  // Custom context\n  customData?: Record<string, any>;\n}\n\n// Chat session state\nexport interface ChatSession {\n  conversationId: string;\n  isOpen: boolean;\n  isMinimized: boolean;\n  unreadCount: number;\n  \n  // UI state\n  isTyping: boolean;\n  typingUsers: string[];\n  \n  // Connection state\n  isConnected: boolean;\n  connectionStatus: 'connecting' | 'connected' | 'disconnected' | 'error';\n  lastPingAt?: string;\n  \n  // Draft message\n  draftMessage: string;\n  draftAttachments: File[];\n}\n\n// Typing indicator\nexport interface TypingIndicator {\n  conversationId: string;\n  userId: string;\n  userName: string;\n  timestamp: string;\n}\n\n// File upload progress\nexport interface FileUpload {\n  id: string;\n  file: File;\n  progress: number;\n  status: 'uploading' | 'completed' | 'error';\n  url?: string;\n  error?: string;\n}\n\n// Chat configuration\nexport interface ChatConfig {\n  // UI settings\n  theme: 'light' | 'dark' | 'auto';\n  position: 'bottom-right' | 'bottom-left' | 'bottom-center';\n  width: number;\n  height: number;\n  \n  // Behavior settings\n  autoOpen: boolean;\n  showOnPages: string[];\n  hideOnPages: string[];\n  \n  // Features\n  enableFileUpload: boolean;\n  enableVoiceMessages: boolean;\n  enableScreenshots: boolean;\n  enableEmojis: boolean;\n  \n  // Limits\n  maxFileSize: number; // bytes\n  maxMessageLength: number;\n  allowedFileTypes: string[];\n  \n  // Channels\n  enabledChannels: ChannelType[];\n  defaultChannels: ChannelType[];\n  \n  // Notifications\n  enableNotifications: boolean;\n  notificationSound: boolean;\n  \n  // Privacy\n  collectUserInfo: boolean;\n  requireConsent: boolean;\n  dataRetentionDays: number;\n}\n\n// API response types\nexport interface ChatApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n  timestamp: string;\n}\n\nexport interface SendMessageRequest {\n  conversationId?: string;\n  type: MessageType;\n  content: string;\n  metadata?: MessageMetadata;\n  replyToId?: string;\n  channels?: ChannelType[];\n}\n\nexport interface SendMessageResponse {\n  message: ChatMessage;\n  conversation: Conversation;\n}\n\nexport interface GetMessagesRequest {\n  conversationId: string;\n  limit?: number;\n  before?: string; // Message ID\n  after?: string; // Message ID\n}\n\nexport interface GetMessagesResponse {\n  messages: ChatMessage[];\n  hasMore: boolean;\n  total: number;\n}\n\n// WebSocket event types\nexport type WebSocketEventType = \n  | 'message_sent'\n  | 'message_received'\n  | 'message_updated'\n  | 'message_deleted'\n  | 'typing_start'\n  | 'typing_stop'\n  | 'user_joined'\n  | 'user_left'\n  | 'conversation_updated'\n  | 'connection_status'\n  | 'error';\n\nexport interface WebSocketEvent {\n  type: WebSocketEventType;\n  data: any;\n  timestamp: string;\n  conversationId?: string;\n}\n\n// Error types\nexport interface ChatError {\n  code: string;\n  message: string;\n  details?: any;\n  timestamp: string;\n  conversationId?: string;\n  messageId?: string;\n}\n\n// Utility types\nexport type MessageFilter = {\n  conversationId?: string;\n  senderId?: string;\n  type?: MessageType;\n  channel?: ChannelType;\n  status?: MessageStatus;\n  dateFrom?: string;\n  dateTo?: string;\n};\n\nexport type ConversationFilter = {\n  status?: ConversationStatus;\n  priority?: string;\n  assignedAgentId?: string;\n  channel?: ChannelType;\n  category?: string;\n  tags?: string[];\n  dateFrom?: string;\n  dateTo?: string;\n};\n\n// Analytics types\nexport interface ChatAnalytics {\n  totalConversations: number;\n  activeConversations: number;\n  averageResponseTime: number;\n  satisfactionScore: number;\n  \n  messageStats: {\n    totalMessages: number;\n    messagesByType: Record<MessageType, number>;\n    messagesByChannel: Record<ChannelType, number>;\n  };\n  \n  conversationStats: {\n    byStatus: Record<ConversationStatus, number>;\n    byPriority: Record<string, number>;\n    byChannel: Record<ChannelType, number>;\n  };\n  \n  timeStats: {\n    averageResolutionTime: number;\n    firstResponseTime: number;\n    peakHours: number[];\n  };\n}\n\n// Export utility functions\nexport function createMessage(\n  conversationId: string,\n  senderId: string,\n  senderName: string,\n  content: string,\n  type: MessageType = 'text',\n  channel: ChannelType = 'app'\n): ChatMessage {\n  return {\n    id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    conversationId,\n    senderId,\n    senderName,\n    senderRole: 'user',\n    type,\n    content,\n    status: 'sending',\n    timestamp: new Date().toISOString(),\n    channel\n  };\n}\n\nexport function createConversation(\n  title: string,\n  userInfo?: UserInfo,\n  context?: ConversationContext\n): Conversation {\n  const now = new Date().toISOString();\n  \n  return {\n    id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    title,\n    status: 'new',\n    priority: 'normal',\n    tags: [],\n    participants: [],\n    channels: [{\n      type: 'app',\n      enabled: true,\n      config: {},\n      syncStatus: 'synced'\n    }],\n    primaryChannel: 'app',\n    userInfo,\n    context,\n    createdAt: now,\n    updatedAt: now,\n    messageCount: 0\n  };\n}\n\nexport function isSystemMessage(message: ChatMessage): boolean {\n  return message.type === 'system' || message.senderRole === 'system';\n}\n\nexport function isUserMessage(message: ChatMessage): boolean {\n  return message.senderRole === 'user';\n}\n\nexport function isAgentMessage(message: ChatMessage): boolean {\n  return message.senderRole === 'agent';\n}\n\nexport function getMessageDisplayTime(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n  const diffMins = Math.floor(diffMs / (1000 * 60));\n  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  \n  if (diffMins < 1) return 'Just now';\n  if (diffMins < 60) return `${diffMins}m ago`;\n  if (diffHours < 24) return `${diffHours}h ago`;\n  if (diffDays < 7) return `${diffDays}d ago`;\n  \n  return date.toLocaleDateString();\n}\n