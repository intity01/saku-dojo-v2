import React, { useState, useEffect } from 'react';
import { ThemeSelector } from './ThemeSelector';

interface SettingsScreenProps {
  onBack: () => void;
}

interface Settings {
  enableDictionary: boolean;
  enableCustomQuestions: boolean;
  enableAnimations: boolean;
  enableSounds: boolean;
  autoSave: boolean;
  showTips: boolean;
  language: 'th' | 'en';
  theme: 'system' | 'light' | 'dark';
}

const SettingsScreen: React.FC<SettingsScreenProps> = ({ onBack }) => {
  const [settings, setSettings] = useState<Settings>({
    enableDictionary: true,
    enableCustomQuestions: true,
    enableAnimations: true,
    enableSounds: false,
    autoSave: true,
    showTips: true,
    language: 'th',
    theme: 'system'
  });

  // Load settings from localStorage
  useEffect(() => {
    const savedSettings = localStorage.getItem('sakulang-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
        console.error('Failed to load settings:', error);
      }
    }
  }, []);

  // Save settings to localStorage
  const saveSettings = (newSettings: Settings) => {
    setSettings(newSettings);
    localStorage.setItem('sakulang-settings', JSON.stringify(newSettings));
  };

  const handleSettingChange = (key: keyof Settings, value: any) => {
    const newSettings = { ...settings, [key]: value };
    saveSettings(newSettings);
  };

  const resetSettings = () => {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?')) {
      const defaultSettings: Settings = {
        enableDictionary: true,
        enableCustomQuestions: true,
        enableAnimations: true,
        enableSounds: false,
        autoSave: true,
        showTips: true,
        language: 'th',
        theme: 'system'
      };
      saveSettings(defaultSettings);
    }
  };

  const exportSettings = () => {
    const data = {
      exportDate: new Date().toISOString(),
      settings,
      version: '2.0'
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `sakulang-settings-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const importSettings = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target?.result as string);
        if (data.settings) {
          saveSettings({ ...settings, ...data.settings });
          alert('‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        }
      } catch (error) {
        alert('‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
    };
    reader.readAsText(file);
  };

  return (
    <div className="settings-screen">
      <div className="settings-header">
        <button
          type="button"
          className="btn btn-secondary btn-sm back-btn"
          onClick={onBack}
        >
          ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
        </button>
        
        <h1>‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h1>
      </div>

      <div className="settings-content">
        {/* Learning Settings */}
        <div className="settings-section">
          <h2>üéì ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ</h2>
          
          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°</label>
              <p className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ú‡πà‡∏≤‡∏ô</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={settings.enableDictionary}
                onChange={(e) => handleSettingChange('enableDictionary', e.target.checked)}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>

          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á</label>
              <p className="setting-description">‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={settings.enableCustomQuestions}
                onChange={(e) => handleSettingChange('enableCustomQuestions', e.target.checked)}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>

          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</label>
              <p className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={settings.showTips}
                onChange={(e) => handleSettingChange('showTips', e.target.checked)}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>
        </div>

        {/* Interface Settings */}
        <div className="settings-section">
          <h2>üé® ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤</h2>
          
          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡∏ò‡∏µ‡∏°</label>
              <p className="setting-description">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô</p>
            </div>
            <ThemeSelector />
          </div>

          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô</label>
              <p className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={settings.enableAnimations}
                onChange={(e) => handleSettingChange('enableAnimations', e.target.checked)}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>

          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ</label>
              <p className="setting-description">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</p>
            </div>
            <select
              value={settings.language}
              onChange={(e) => handleSettingChange('language', e.target.value)}
              className="setting-select"
            >
              <option value="th">üáπüá≠ ‡πÑ‡∏ó‡∏¢</option>
              <option value="en">üá∫üá∏ English</option>
            </select>
          </div>
        </div>

        {/* System Settings */}
        <div className="settings-section">
          <h2>üíæ ‡∏£‡∏∞‡∏ö‡∏ö</h2>
          
          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</label>
              <p className="setting-description">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={settings.autoSave}
                onChange={(e) => handleSettingChange('autoSave', e.target.checked)}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>

          <div className="setting-item">
            <div className="setting-info">
              <label className="setting-label">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á</label>
              <p className="setting-description">‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={settings.enableSounds}
                onChange={(e) => handleSettingChange('enableSounds', e.target.checked)}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>
        </div>

        {/* Data Management */}
        <div className="settings-section">
          <h2>üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
          
          <div className="setting-actions">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={exportSettings}
            >
              üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            </button>
            
            <label className="btn btn-secondary file-input-label">
              üì• ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
              <input
                type="file"
                accept=".json"
                onChange={importSettings}
                style={{ display: 'none' }}
              />
            </label>
            
            <button
              type="button"
              className="btn btn-danger"
              onClick={resetSettings}
            >
              üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            </button>
          </div>
        </div>

        {/* About */}
        <div className="settings-section">
          <h2>‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö</h2>
          
          <div className="about-info">
            <div className="app-info">
              <h3>üéå SAKULANG</h3>
              <p>‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ü‡∏£‡∏µ</p>
              <p>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 2.0</p>
            </div>
            
            <div className="links">
              <a href="#" className="link-btn">üìö ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</a>
              <a href="#" className="link-btn">üêõ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤</a>
              <a href="#" className="link-btn">üíù ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SettingsScreen;