// Chat Drawer Component\n// Main chat interface with ~360px width\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { cn } from '../../utils/cn';\nimport type { ChatMessage, Conversation, ChannelType } from '../../types/chat';\nimport { MessageList } from './MessageList';\nimport { MessageInput } from './MessageInput';\nimport { ChannelSelector } from './ChannelSelector';\nimport { ChatHeader } from './ChatHeader';\n\nexport interface ChatDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  conversation?: Conversation;\n  messages: ChatMessage[];\n  isLoading?: boolean;\n  isConnected?: boolean;\n  onSendMessage: (content: string, type?: 'text' | 'file') => void;\n  onFileUpload: (files: File[]) => void;\n  onChannelChange: (channels: ChannelType[]) => void;\n  selectedChannels: ChannelType[];\n  availableChannels: ChannelType[];\n  className?: string;\n}\n\nconst ChatDrawer: React.FC<ChatDrawerProps> = ({\n  isOpen,\n  onClose,\n  conversation,\n  messages,\n  isLoading = false,\n  isConnected = true,\n  onSendMessage,\n  onFileUpload,\n  onChannelChange,\n  selectedChannels,\n  availableChannels,\n  className\n}) => {\n  const [showChannelSelector, setShowChannelSelector] = useState(false);\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  // Handle escape key to close drawer\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      // Prevent body scroll when drawer is open\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  // Handle click outside to close (mobile only)\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        drawerRef.current &&\n        !drawerRef.current.contains(event.target as Node) &&\n        window.innerWidth < 768 // Only on mobile\n      ) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop for mobile */}\n      <div\n        className={cn(\n          'fixed inset-0 bg-black bg-opacity-50 z-40',\n          'md:hidden', // Only show on mobile\n          'transition-opacity duration-200',\n          isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'\n        )}\n        onClick={onClose}\n        aria-hidden=\"true\"\n      />\n\n      {/* Chat Drawer */}\n      <div\n        ref={drawerRef}\n        className={cn(\n          // Base styles\n          'fixed z-50 bg-white shadow-2xl',\n          'flex flex-col',\n          \n          // Mobile: Full screen\n          'inset-0 md:inset-auto',\n          \n          // Desktop: Positioned drawer (~360px width)\n          'md:bottom-0 md:right-0 md:top-0',\n          'md:w-96 md:max-w-[90vw]',\n          \n          // Animation\n          'transition-transform duration-300 ease-in-out',\n          isOpen\n            ? 'translate-x-0'\n            : 'translate-x-full',\n          \n          className\n        )}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"chat-drawer-title\"\n        aria-describedby=\"chat-drawer-description\"\n      >\n        {/* Header */}\n        <ChatHeader\n          title=\"‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö Kiro Care\"\n          subtitle={conversation?.status === 'new' ? '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà' : undefined}\n          isConnected={isConnected}\n          onClose={onClose}\n          onToggleChannels={() => setShowChannelSelector(!showChannelSelector)}\n          selectedChannels={selectedChannels}\n        />\n\n        {/* Channel Selector */}\n        {showChannelSelector && (\n          <ChannelSelector\n            availableChannels={availableChannels}\n            selectedChannels={selectedChannels}\n            onChannelChange={onChannelChange}\n            onClose={() => setShowChannelSelector(false)}\n          />\n        )}\n\n        {/* Connection Status */}\n        {!isConnected && (\n          <div className=\"px-4 py-2 bg-yellow-50 border-b border-yellow-200\">\n            <div className=\"flex items-center gap-2 text-sm text-yellow-800\">\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\" />\n              <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...</span>\n            </div>\n          </div>\n        )}\n\n        {/* Messages Area */}\n        <div className=\"flex-1 flex flex-col min-h-0\">\n          {/* Welcome Message */}\n          {(!conversation || messages.length === 0) && (\n            <div className=\"p-4 border-b border-gray-100\">\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n                  </svg>\n                </div>\n                <h3 className=\"font-medium text-gray-900 mb-1\">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã</h3>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ Kiro Care ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?\n                </p>\n                \n                {/* Quick Actions */}\n                <div className=\"space-y-2\">\n                  <button\n                    onClick={() => onSendMessage('‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')}\n                    className=\"w-full p-3 text-left text-sm bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors\"\n                  >\n                    üêõ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n                  </button>\n                  <button\n                    onClick={() => onSendMessage('‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô')}\n                    className=\"w-full p-3 text-left text-sm bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors\"\n                  >\n                    üìö ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n                  </button>\n                  <button\n                    onClick={() => onSendMessage('‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå')}\n                    className=\"w-full p-3 text-left text-sm bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors\"\n                  >\n                    ‚ùì ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Message List */}\n          <MessageList\n            messages={messages}\n            isLoading={isLoading}\n            className=\"flex-1\"\n          />\n          \n          {/* Scroll anchor */}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Help Link */}\n        <div className=\"px-4 py-2 border-t border-gray-100 bg-gray-50\">\n          <button\n            onClick={() => window.open('/help', '_blank')}\n            className=\"flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800 transition-colors\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n            </svg>\n            <span>‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÄ‡∏≠‡∏á</span>\n          </button>\n        </div>\n\n        {/* Message Input */}\n        <MessageInput\n          onSendMessage={onSendMessage}\n          onFileUpload={onFileUpload}\n          disabled={!isConnected}\n          placeholder={isConnected ? '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...' : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...'}\n        />\n      </div>\n    </>\n  );\n};\n\nexport { ChatDrawer };\n