// Message Bubble Component\n// Individual message display with proper styling and accessibility\n\nimport React, { useState } from 'react';\nimport { cn } from '../../utils/cn';\nimport type { ChatMessage } from '../../types/chat';\nimport { getMessageDisplayTime, isUserMessage, isAgentMessage, isSystemMessage } from '../../types/chat';\n\nexport interface MessageBubbleProps {\n  message: ChatMessage;\n  showAvatar?: boolean;\n  showSenderName?: boolean;\n  showTimestamp?: boolean;\n  onAction?: (messageId: string, action: 'reply' | 'edit' | 'delete') => void;\n  className?: string;\n}\n\nconst MessageBubble: React.FC<MessageBubbleProps> = ({\n  message,\n  showAvatar = true,\n  showSenderName = true,\n  showTimestamp = true,\n  onAction,\n  className\n}) => {\n  const [showActions, setShowActions] = useState(false);\n  const [imageError, setImageError] = useState(false);\n\n  const isUser = isUserMessage(message);\n  const isAgent = isAgentMessage(message);\n  const isSystem = isSystemMessage(message);\n\n  // System messages have different styling\n  if (isSystem) {\n    return (\n      <div className={cn('flex justify-center my-4', className)}>\n        <div className=\"px-3 py-2 bg-gray-100 rounded-lg max-w-xs\">\n          <p className=\"text-xs text-gray-600 text-center\">\n            {message.content}\n          </p>\n          {showTimestamp && (\n            <p className=\"text-xs text-gray-400 text-center mt-1\">\n              {getMessageDisplayTime(message.timestamp)}\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex gap-3 group',\n        isUser ? 'flex-row-reverse' : 'flex-row',\n        className\n      )}\n      onMouseEnter={() => setShowActions(true)}\n      onMouseLeave={() => setShowActions(false)}\n    >\n      {/* Avatar */}\n      {showAvatar && (\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n              <span className=\"text-xs font-medium text-white\">\n                {message.senderName.charAt(0).toUpperCase()}\n              </span>\n            </div>\n          ) : (\n            <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n              <svg className=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n              </svg>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Message content */}\n      <div className={cn(\n        'flex-1 min-w-0',\n        isUser ? 'items-end' : 'items-start'\n      )}>\n        {/* Sender name */}\n        {showSenderName && !isUser && (\n          <div className=\"mb-1\">\n            <span className=\"text-xs font-medium text-gray-700\">\n              {message.senderName}\n            </span>\n            {message.senderRole === 'agent' && (\n              <span className=\"ml-2 inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800\">\n                ทีมงาน\n              </span>\n            )}\n          </div>\n        )}\n\n        {/* Message bubble */}\n        <div className={cn(\n          'relative max-w-xs lg:max-w-md',\n          isUser ? 'ml-auto' : 'mr-auto'\n        )}>\n          <div\n            className={cn(\n              'px-4 py-2 rounded-2xl shadow-sm',\n              'break-words',\n              \n              // User messages (right side, blue)\n              isUser && [\n                'bg-blue-600 text-white',\n                'rounded-br-md' // Sharp corner on bottom right\n              ],\n              \n              // Agent messages (left side, gray)\n              isAgent && [\n                'bg-gray-100 text-gray-900',\n                'rounded-bl-md' // Sharp corner on bottom left\n              ],\n              \n              // Message status styling\n              message.status === 'sending' && 'opacity-70',\n              message.status === 'failed' && 'border-2 border-red-300'\n            )}\n          >\n            {/* Message content based on type */}\n            {message.type === 'text' && (\n              <p className=\"text-sm whitespace-pre-wrap\">\n                {message.content}\n              </p>\n            )}\n\n            {message.type === 'image' && (\n              <div className=\"space-y-2\">\n                {message.content && (\n                  <p className=\"text-sm whitespace-pre-wrap\">\n                    {message.content}\n                  </p>\n                )}\n                {message.metadata?.fileUrl && !imageError && (\n                  <img\n                    src={message.metadata.fileUrl}\n                    alt={message.metadata.fileName || 'Uploaded image'}\n                    className=\"max-w-full h-auto rounded-lg\"\n                    onError={() => setImageError(true)}\n                    loading=\"lazy\"\n                  />\n                )}\n                {imageError && (\n                  <div className=\"flex items-center gap-2 p-3 bg-gray-50 rounded-lg\">\n                    <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                    </svg>\n                    <span className=\"text-sm text-gray-600\">\n                      ไม่สามารถโหลดรูปภาพได้\n                    </span>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {message.type === 'file' && (\n              <div className=\"space-y-2\">\n                {message.content && (\n                  <p className=\"text-sm whitespace-pre-wrap\">\n                    {message.content}\n                  </p>\n                )}\n                <div className=\"flex items-center gap-3 p-3 bg-white bg-opacity-20 rounded-lg\">\n                  <div className=\"flex-shrink-0\">\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium truncate\">\n                      {message.metadata?.fileName || 'ไฟล์แนบ'}\n                    </p>\n                    {message.metadata?.fileSize && (\n                      <p className=\"text-xs opacity-75\">\n                        {formatFileSize(message.metadata.fileSize)}\n                      </p>\n                    )}\n                  </div>\n                  {message.metadata?.fileUrl && (\n                    <a\n                      href={message.metadata.fileUrl}\n                      download={message.metadata.fileName}\n                      className=\"flex-shrink-0 p-1 hover:bg-white hover:bg-opacity-20 rounded\"\n                      aria-label=\"ดาวน์โหลดไฟล์\"\n                    >\n                      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                      </svg>\n                    </a>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Message status indicator */}\n            {isUser && (\n              <div className={cn(\n                'absolute -bottom-1 -right-1',\n                'flex items-center justify-center',\n                'w-4 h-4 rounded-full',\n                'text-xs',\n                \n                message.status === 'sending' && 'bg-gray-400 text-white',\n                message.status === 'sent' && 'bg-gray-500 text-white',\n                message.status === 'delivered' && 'bg-blue-500 text-white',\n                message.status === 'read' && 'bg-green-500 text-white',\n                message.status === 'failed' && 'bg-red-500 text-white'\n              )}>\n                {message.status === 'sending' && (\n                  <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\" />\n                )}\n                {message.status === 'sent' && '✓'}\n                {message.status === 'delivered' && '✓✓'}\n                {message.status === 'read' && '✓✓'}\n                {message.status === 'failed' && '!'}\n              </div>\n            )}\n          </div>\n\n          {/* Channel indicator */}\n          {message.channel !== 'app' && (\n            <div className={cn(\n              'mt-1 text-xs text-gray-500',\n              isUser ? 'text-right' : 'text-left'\n            )}>\n              ส่งผ่าน {getChannelName(message.channel)}\n            </div>\n          )}\n        </div>\n\n        {/* Timestamp */}\n        {showTimestamp && (\n          <div className={cn(\n            'mt-1 text-xs text-gray-500',\n            isUser ? 'text-right' : 'text-left'\n          )}>\n            {getMessageDisplayTime(message.timestamp)}\n            {message.editedAt && (\n              <span className=\"ml-1 italic\">(แก้ไขแล้ว)</span>\n            )}\n          </div>\n        )}\n\n        {/* Message actions */}\n        {onAction && showActions && (\n          <div className={cn(\n            'mt-2 flex gap-1',\n            isUser ? 'justify-end' : 'justify-start'\n          )}>\n            <button\n              onClick={() => onAction(message.id, 'reply')}\n              className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded transition-colors\"\n              aria-label=\"ตอบกลับข้อความ\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6\" />\n              </svg>\n            </button>\n            \n            {isUser && (\n              <>\n                <button\n                  onClick={() => onAction(message.id, 'edit')}\n                  className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded transition-colors\"\n                  aria-label=\"แก้ไขข้อความ\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                  </svg>\n                </button>\n                \n                <button\n                  onClick={() => onAction(message.id, 'delete')}\n                  className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded transition-colors\"\n                  aria-label=\"ลบข้อความ\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                  </svg>\n                </button>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Helper functions\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nfunction getChannelName(channel: string): string {\n  const channelNames: Record<string, string> = {\n    email: 'อีเมล',\n    telegram: 'Telegram',\n    messenger: 'Messenger',\n    webhook: 'Webhook',\n    app: 'แอป'\n  };\n  \n  return channelNames[channel] || channel;\n}\n\nexport { MessageBubble };\n