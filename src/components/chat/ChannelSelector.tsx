// Channel Selector Component\n// Multi-select interface for choosing communication channels\n\nimport React, { useState } from 'react';\nimport { cn } from '../../utils/cn';\nimport type { ChannelType } from '../../types/chat';\n\nexport interface ChannelSelectorProps {\n  availableChannels: ChannelType[];\n  selectedChannels: ChannelType[];\n  onChannelChange: (channels: ChannelType[]) => void;\n  onClose: () => void;\n  className?: string;\n}\n\ninterface ChannelInfo {\n  type: ChannelType;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n  requiresSetup?: boolean;\n  setupInstructions?: string;\n}\n\nconst CHANNEL_INFO: Record<ChannelType, ChannelInfo> = {\n  app: {\n    type: 'app',\n    name: 'แอป Saku Dojo',\n    description: 'รับการตอบกลับในแอปโดยตรง',\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z\" />\n      </svg>\n    ),\n    color: 'blue'\n  },\n  email: {\n    type: 'email',\n    name: 'อีเมล',\n    description: 'รับการตอบกลับทางอีเมล',\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n      </svg>\n    ),\n    color: 'green',\n    requiresSetup: true,\n    setupInstructions: 'กรุณาระบุอีเมลของคุณเพื่อรับการตอบกลับ'\n  },\n  telegram: {\n    type: 'telegram',\n    name: 'Telegram',\n    description: 'รับการตอบกลับทาง Telegram Bot',\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path d=\"M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z\"/>\n      </svg>\n    ),\n    color: 'sky',\n    requiresSetup: true,\n    setupInstructions: 'เริ่มแชทกับ @SakuDojoBot ใน Telegram'\n  },\n  messenger: {\n    type: 'messenger',\n    name: 'Messenger',\n    description: 'รับการตอบกลับทาง Facebook Messenger',\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 0C5.373 0 0 4.975 0 11.111c0 3.497 1.745 6.616 4.472 8.652V24l4.086-2.242c1.09.301 2.246.464 3.442.464 6.627 0 12-4.974 12-11.111C24 4.975 18.627 0 12 0zm1.193 14.963l-3.056-3.259-5.963 3.259L10.732 8.1l3.13 3.259L19.752 8.1l-6.559 6.863z\"/>\n      </svg>\n    ),\n    color: 'purple',\n    requiresSetup: true,\n    setupInstructions: 'เชื่อมต่อกับ Facebook Messenger'\n  },\n  webhook: {\n    type: 'webhook',\n    name: 'Webhook',\n    description: 'ส่งไปยัง URL ที่กำหนดเอง',\n    icon: (\n      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1\" />\n      </svg>\n    ),\n    color: 'gray',\n    requiresSetup: true,\n    setupInstructions: 'กำหนด Webhook URL ในการตั้งค่า'\n  }\n};\n\nconst ChannelSelector: React.FC<ChannelSelectorProps> = ({\n  availableChannels,\n  selectedChannels,\n  onChannelChange,\n  onClose,\n  className\n}) => {\n  const [emailInput, setEmailInput] = useState('');\n  const [showEmailInput, setShowEmailInput] = useState(false);\n\n  const handleChannelToggle = (channelType: ChannelType) => {\n    const isSelected = selectedChannels.includes(channelType);\n    \n    if (isSelected) {\n      // Remove channel\n      onChannelChange(selectedChannels.filter(c => c !== channelType));\n    } else {\n      // Add channel\n      if (channelType === 'email') {\n        setShowEmailInput(true);\n        return;\n      }\n      onChannelChange([...selectedChannels, channelType]);\n    }\n  };\n\n  const handleEmailSubmit = () => {\n    if (emailInput.trim() && isValidEmail(emailInput)) {\n      onChannelChange([...selectedChannels, 'email']);\n      setShowEmailInput(false);\n      setEmailInput('');\n    }\n  };\n\n  const getColorClasses = (color: string, isSelected: boolean) => {\n    const colors = {\n      blue: isSelected \n        ? 'bg-blue-100 border-blue-300 text-blue-800'\n        : 'bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100',\n      green: isSelected\n        ? 'bg-green-100 border-green-300 text-green-800'\n        : 'bg-green-50 border-green-200 text-green-700 hover:bg-green-100',\n      sky: isSelected\n        ? 'bg-sky-100 border-sky-300 text-sky-800'\n        : 'bg-sky-50 border-sky-200 text-sky-700 hover:bg-sky-100',\n      purple: isSelected\n        ? 'bg-purple-100 border-purple-300 text-purple-800'\n        : 'bg-purple-50 border-purple-200 text-purple-700 hover:bg-purple-100',\n      gray: isSelected\n        ? 'bg-gray-100 border-gray-300 text-gray-800'\n        : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'\n    };\n    return colors[color as keyof typeof colors] || colors.gray;\n  };\n\n  return (\n    <div className={cn('border-b border-gray-200 bg-gray-50', className)}>\n      <div className=\"p-4\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-sm font-medium text-gray-900\">\n              เลือกช่องทางการติดต่อ\n            </h3>\n            <p className=\"text-xs text-gray-600 mt-1\">\n              เลือกช่องทางที่ต้องการรับการตอบกลับ\n            </p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-1 text-gray-400 hover:text-gray-600 rounded transition-colors\"\n            aria-label=\"ปิด\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Channel Options */}\n        <div className=\"space-y-2\">\n          {availableChannels.map((channelType) => {\n            const channel = CHANNEL_INFO[channelType];\n            const isSelected = selectedChannels.includes(channelType);\n            const isDisabled = channel.requiresSetup && !isSelected;\n\n            return (\n              <div key={channelType}>\n                <button\n                  onClick={() => handleChannelToggle(channelType)}\n                  disabled={channelType === 'app' && selectedChannels.length === 1 && isSelected}\n                  className={cn(\n                    'w-full p-3 rounded-lg border-2 transition-all duration-200',\n                    'flex items-center gap-3 text-left',\n                    'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n                    'disabled:opacity-50 disabled:cursor-not-allowed',\n                    getColorClasses(channel.color, isSelected)\n                  )}\n                >\n                  {/* Icon */}\n                  <div className=\"flex-shrink-0\">\n                    {channel.icon}\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">{channel.name}</span>\n                      {isSelected && (\n                        <svg className=\"w-4 h-4 text-current\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      )}\n                    </div>\n                    <p className=\"text-xs opacity-75 mt-0.5\">\n                      {channel.description}\n                    </p>\n                    {channel.requiresSetup && !isSelected && (\n                      <p className=\"text-xs opacity-60 mt-1 italic\">\n                        {channel.setupInstructions}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Status indicator */}\n                  <div className=\"flex-shrink-0\">\n                    {isSelected ? (\n                      <div className=\"w-2 h-2 bg-current rounded-full\" />\n                    ) : (\n                      <div className=\"w-2 h-2 border border-current rounded-full\" />\n                    )}\n                  </div>\n                </button>\n\n                {/* Email input */}\n                {channelType === 'email' && showEmailInput && (\n                  <div className=\"mt-2 p-3 bg-white rounded-lg border border-gray-200\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      อีเมลของคุณ\n                    </label>\n                    <div className=\"flex gap-2\">\n                      <input\n                        type=\"email\"\n                        value={emailInput}\n                        onChange={(e) => setEmailInput(e.target.value)}\n                        placeholder=\"example@email.com\"\n                        className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            handleEmailSubmit();\n                          }\n                        }}\n                      />\n                      <button\n                        onClick={handleEmailSubmit}\n                        disabled={!emailInput.trim() || !isValidEmail(emailInput)}\n                        className=\"px-3 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        เพิ่ม\n                      </button>\n                    </div>\n                    <button\n                      onClick={() => {\n                        setShowEmailInput(false);\n                        setEmailInput('');\n                      }}\n                      className=\"text-xs text-gray-500 hover:text-gray-700 mt-2\"\n                    >\n                      ยกเลิก\n                    </button>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Selected channels summary */}\n        {selectedChannels.length > 0 && (\n          <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-center gap-2 text-sm text-blue-800\">\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span className=\"font-medium\">\n                จะส่งข้อความไปยัง {selectedChannels.length} ช่องทาง:\n              </span>\n            </div>\n            <div className=\"flex flex-wrap gap-1 mt-2\">\n              {selectedChannels.map((channelType) => {\n                const channel = CHANNEL_INFO[channelType];\n                return (\n                  <span\n                    key={channelType}\n                    className=\"inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-md\"\n                  >\n                    {channel.icon}\n                    {channel.name}\n                  </span>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Warning for app-only */}\n        {selectedChannels.length === 1 && selectedChannels[0] === 'app' && (\n          <div className=\"mt-4 p-3 bg-yellow-50 rounded-lg\">\n            <div className=\"flex items-start gap-2 text-sm text-yellow-800\">\n              <svg className=\"w-4 h-4 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n              <div>\n                <p className=\"font-medium\">การแจ้งเตือนเฉพาะในแอป</p>\n                <p className=\"text-xs mt-1\">\n                  คุณจะได้รับการตอบกลับเฉพาะในแอป Saku Dojo เท่านั้น\n                  เพิ่มช่องทางอื่นเพื่อรับการแจ้งเตือนภายนอก\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Helper function\nfunction isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport { ChannelSelector };\n