// Message List Component\n// Scrollable list of chat messages with proper accessibility\n\nimport React, { useRef, useEffect } from 'react';\nimport { cn } from '../../utils/cn';\nimport type { ChatMessage } from '../../types/chat';\nimport { MessageBubble } from './MessageBubble';\nimport { TypingIndicator } from './TypingIndicator';\nimport { getMessageDisplayTime } from '../../types/chat';\n\nexport interface MessageListProps {\n  messages: ChatMessage[];\n  isLoading?: boolean;\n  isTyping?: boolean;\n  typingUsers?: string[];\n  className?: string;\n  onMessageAction?: (messageId: string, action: 'reply' | 'edit' | 'delete') => void;\n}\n\nconst MessageList: React.FC<MessageListProps> = ({\n  messages,\n  isLoading = false,\n  isTyping = false,\n  typingUsers = [],\n  className,\n  onMessageAction\n}) => {\n  const listRef = useRef<HTMLDivElement>(null);\n  const lastMessageRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (lastMessageRef.current) {\n      lastMessageRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages.length]);\n\n  // Group messages by date\n  const groupedMessages = React.useMemo(() => {\n    const groups: { date: string; messages: ChatMessage[] }[] = [];\n    let currentDate = '';\n    let currentGroup: ChatMessage[] = [];\n\n    messages.forEach((message) => {\n      const messageDate = new Date(message.timestamp).toDateString();\n      \n      if (messageDate !== currentDate) {\n        if (currentGroup.length > 0) {\n          groups.push({ date: currentDate, messages: currentGroup });\n        }\n        currentDate = messageDate;\n        currentGroup = [message];\n      } else {\n        currentGroup.push(message);\n      }\n    });\n\n    if (currentGroup.length > 0) {\n      groups.push({ date: currentDate, messages: currentGroup });\n    }\n\n    return groups;\n  }, [messages]);\n\n  const formatDateHeader = (dateString: string): string => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'วันนี้';\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'เมื่อวาน';\n    } else {\n      return date.toLocaleDateString('th-TH', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  };\n\n  if (isLoading && messages.length === 0) {\n    return (\n      <div className={cn('flex-1 flex items-center justify-center p-8', className)}>\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p className=\"text-sm text-gray-600\">กำลังโหลดข้อความ...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={listRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent',\n        className\n      )}\n      role=\"log\"\n      aria-label=\"Chat messages\"\n      aria-live=\"polite\"\n    >\n      {/* Empty state */}\n      {messages.length === 0 && !isLoading && (\n        <div className=\"flex-1 flex items-center justify-center p-8\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n              </svg>\n            </div>\n            <p className=\"text-sm text-gray-500\">ยังไม่มีข้อความ</p>\n            <p className=\"text-xs text-gray-400 mt-1\">เริ่มการสนทนาด้วยการส่งข้อความ</p>\n          </div>\n        </div>\n      )}\n\n      {/* Message groups */}\n      {groupedMessages.map((group, groupIndex) => (\n        <div key={group.date} className=\"px-4\">\n          {/* Date header */}\n          <div className=\"flex justify-center my-4\">\n            <div className=\"px-3 py-1 bg-gray-100 rounded-full\">\n              <span className=\"text-xs text-gray-600 font-medium\">\n                {formatDateHeader(group.date)}\n              </span>\n            </div>\n          </div>\n\n          {/* Messages in this date group */}\n          <div className=\"space-y-4\">\n            {group.messages.map((message, messageIndex) => {\n              const isLastMessage = \n                groupIndex === groupedMessages.length - 1 && \n                messageIndex === group.messages.length - 1;\n              \n              const prevMessage = messageIndex > 0 ? group.messages[messageIndex - 1] : null;\n              const nextMessage = messageIndex < group.messages.length - 1 ? group.messages[messageIndex + 1] : null;\n              \n              // Check if this message should be grouped with previous/next\n              const isGroupedWithPrev = \n                prevMessage &&\n                prevMessage.senderId === message.senderId &&\n                prevMessage.senderRole === message.senderRole &&\n                (new Date(message.timestamp).getTime() - new Date(prevMessage.timestamp).getTime()) < 60000; // 1 minute\n              \n              const isGroupedWithNext = \n                nextMessage &&\n                nextMessage.senderId === message.senderId &&\n                nextMessage.senderRole === message.senderRole &&\n                (new Date(nextMessage.timestamp).getTime() - new Date(message.timestamp).getTime()) < 60000; // 1 minute\n\n              return (\n                <div\n                  key={message.id}\n                  ref={isLastMessage ? lastMessageRef : undefined}\n                  className={cn(\n                    'transition-all duration-200',\n                    // Reduce spacing for grouped messages\n                    isGroupedWithPrev && 'mt-1'\n                  )}\n                >\n                  <MessageBubble\n                    message={message}\n                    showAvatar={!isGroupedWithNext}\n                    showSenderName={!isGroupedWithPrev}\n                    showTimestamp={!isGroupedWithNext}\n                    onAction={onMessageAction}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n\n      {/* Typing indicator */}\n      {isTyping && typingUsers.length > 0 && (\n        <div className=\"px-4 py-2\">\n          <TypingIndicator users={typingUsers} />\n        </div>\n      )}\n\n      {/* Loading more messages */}\n      {isLoading && messages.length > 0 && (\n        <div className=\"flex justify-center py-4\">\n          <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { MessageList };\n