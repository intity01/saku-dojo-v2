import React from 'react';
import type { ProgressEntry } from '../types/core';

interface ResultScreenProps {
  progress: ProgressEntry;
  onRestart: () => void;
  onShowProgress: () => void;
}

const ResultScreen: React.FC<ResultScreenProps> = ({
  progress,
  onRestart,
  onShowProgress
}) => {
  const scorePercent = Math.round(progress.scorePct);
  const isGoodScore = scorePercent >= 70;
  const isPerfectScore = scorePercent === 100;

  const getScoreEmoji = () => {
    if (isPerfectScore) return 'üèÜ';
    if (scorePercent >= 90) return 'üåü';
    if (scorePercent >= 80) return 'üéâ';
    if (scorePercent >= 70) return 'üëç';
    if (scorePercent >= 60) return 'üìö';
    return 'üí™';
  };

  const getScoreMessage = () => {
    if (isPerfectScore) return '‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö!';
    if (scorePercent >= 90) return '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!';
    if (scorePercent >= 80) return '‡∏î‡∏µ‡∏°‡∏≤‡∏Å!';
    if (scorePercent >= 70) return '‡∏î‡∏µ!';
    if (scorePercent >= 60) return '‡∏û‡∏≠‡πÉ‡∏ä‡πâ';
    return '‡∏ï‡πâ‡∏≠‡∏á‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="result-screen">
      <div className="result-header">
        <div className="score-display">
          <div className="score-emoji">{getScoreEmoji()}</div>
          <div className="score-text">
            <h1 className="score-percentage">{scorePercent}%</h1>
            <p className="score-message">{getScoreMessage()}</p>
          </div>
        </div>
      </div>

      <div className="result-details">
        <div className="stats-grid">
          <div className="stat-item">
            <div className="stat-value">{progress.correct}</div>
            <div className="stat-label">‡∏ñ‡∏π‡∏Å</div>
          </div>
          
          <div className="stat-item">
            <div className="stat-value">{progress.total - progress.correct}</div>
            <div className="stat-label">‡∏ú‡∏¥‡∏î</div>
          </div>
          
          <div className="stat-item">
            <div className="stat-value">{progress.total}</div>
            <div className="stat-label">‡∏£‡∏ß‡∏°</div>
          </div>
        </div>

        <div className="session-info">
          <div className="info-row">
            <span className="info-label">‡∏†‡∏≤‡∏©‡∏≤:</span>
            <span className="info-value">
              {progress.track === 'EN' ? 'üá∫üá∏ English' : 'üáØüáµ Japanese'}
            </span>
          </div>
          
          <div className="info-row">
            <span className="info-label">‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£:</span>
            <span className="info-value">{progress.framework}</span>
          </div>
          
          <div className="info-row">
            <span className="info-label">‡∏£‡∏∞‡∏î‡∏±‡∏ö:</span>
            <span className="info-value">{progress.level}</span>
          </div>
          
          <div className="info-row">
            <span className="info-label">‡πÇ‡∏´‡∏°‡∏î:</span>
            <span className="info-value">{progress.mode}</span>
          </div>
          
          <div className="info-row">
            <span className="info-label">‡πÄ‡∏ß‡∏•‡∏≤:</span>
            <span className="info-value">{formatDate(progress.date)}</span>
          </div>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="result-progress">
        <div className="progress-bar-container">
          <div 
            className={`progress-bar-fill ${isGoodScore ? 'good-score' : 'needs-improvement'}`}
            style={{ width: `${scorePercent}%` }}
          />
        </div>
        <div className="progress-labels">
          <span>0%</span>
          <span>50%</span>
          <span>100%</span>
        </div>
      </div>

      {/* Recommendations */}
      <div className="recommendations">
        {isPerfectScore && (
          <div className="recommendation perfect">
            <h3>üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>
            <p>‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡∏π</p>
          </div>
        )}
        
        {isGoodScore && !isPerfectScore && (
          <div className="recommendation good">
            <h3>üìà ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>
            <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ! ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á</p>
          </div>
        )}
        
        {!isGoodScore && (
          <div className="recommendation needs-work">
            <h3>üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>
            <p>‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î Study ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
          </div>
        )}
      </div>

      {/* Action Buttons */}
      <div className="result-actions">
        <button
          type="button"
          className="btn btn-primary btn-lg"
          onClick={onRestart}
        >
          üîÑ ‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà
        </button>
        
        <button
          type="button"
          className="btn btn-secondary"
          onClick={onShowProgress}
        >
          üìä ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        </button>
      </div>

      {/* Share Results (Future Feature) */}
      <div className="share-section">
        <p className="share-text">‡πÅ‡∏ä‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        <div className="share-buttons">
          <button
            type="button"
            className="btn btn-outline share-btn"
            onClick={() => {
              const text = `‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${scorePercent}% ‡πÉ‡∏ô ${progress.framework} ${progress.level} (${progress.mode}) ‡∏ö‡∏ô SAKULANG! üéå`;
              if (navigator.share) {
                navigator.share({ text });
              } else {
                navigator.clipboard.writeText(text);
                alert('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß!');
              }
            }}
          >
            üì± ‡πÅ‡∏ä‡∏£‡πå
          </button>
        </div>
      </div>
    </div>
  );
};

export default ResultScreen;