// TabBar Component - Light Theme Specification\n// Accessible tab navigation with proper ARIA support\n\nimport React from 'react';\nimport { cn } from '../../utils/cn';\n\nexport interface TabItem {\n  id: string;\n  label: string;\n  icon?: React.ReactNode;\n  badge?: string | number;\n  disabled?: boolean;\n  'aria-label'?: string;\n}\n\nexport interface TabBarProps {\n  tabs: TabItem[];\n  activeTab: string;\n  onTabChange: (tabId: string) => void;\n  className?: string;\n  variant?: 'default' | 'pills' | 'underline';\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n}\n\nconst TabBar: React.FC<TabBarProps> = ({\n  tabs,\n  activeTab,\n  onTabChange,\n  className,\n  variant = 'default',\n  size = 'md',\n  fullWidth = false\n}) => {\n  const baseClasses = [\n    'flex',\n    fullWidth ? 'w-full' : 'w-auto',\n    'bg-white'\n  ];\n\n  const variantClasses = {\n    default: 'border-b border-gray-200',\n    pills: 'bg-gray-100 rounded-xl p-1',\n    underline: 'space-x-8'\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent, tabId: string) => {\n    const currentIndex = tabs.findIndex(tab => tab.id === activeTab);\n    let newIndex = currentIndex;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n        event.preventDefault();\n        newIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;\n        break;\n      case 'ArrowRight':\n        event.preventDefault();\n        newIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;\n        break;\n      case 'Home':\n        event.preventDefault();\n        newIndex = 0;\n        break;\n      case 'End':\n        event.preventDefault();\n        newIndex = tabs.length - 1;\n        break;\n      case 'Enter':\n      case ' ':\n        event.preventDefault();\n        onTabChange(tabId);\n        return;\n      default:\n        return;\n    }\n\n    const newTab = tabs[newIndex];\n    if (newTab && !newTab.disabled) {\n      onTabChange(newTab.id);\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        baseClasses,\n        variantClasses[variant],\n        className\n      )}\n      role=\"tablist\"\n      aria-orientation=\"horizontal\"\n    >\n      {tabs.map((tab, index) => {\n        const isActive = tab.id === activeTab;\n        const isDisabled = tab.disabled;\n\n        return (\n          <TabButton\n            key={tab.id}\n            tab={tab}\n            isActive={isActive}\n            isDisabled={isDisabled}\n            variant={variant}\n            size={size}\n            fullWidth={fullWidth}\n            onClick={() => !isDisabled && onTabChange(tab.id)}\n            onKeyDown={(event) => handleKeyDown(event, tab.id)}\n            tabIndex={isActive ? 0 : -1}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\ninterface TabButtonProps {\n  tab: TabItem;\n  isActive: boolean;\n  isDisabled?: boolean;\n  variant: 'default' | 'pills' | 'underline';\n  size: 'sm' | 'md' | 'lg';\n  fullWidth: boolean;\n  onClick: () => void;\n  onKeyDown: (event: React.KeyboardEvent) => void;\n  tabIndex: number;\n}\n\nconst TabButton: React.FC<TabButtonProps> = ({\n  tab,\n  isActive,\n  isDisabled,\n  variant,\n  size,\n  fullWidth,\n  onClick,\n  onKeyDown,\n  tabIndex\n}) => {\n  const baseClasses = [\n    'inline-flex items-center justify-center gap-2',\n    'font-medium transition-all duration-200',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500',\n    'disabled:opacity-50 disabled:cursor-not-allowed',\n    'select-none cursor-pointer',\n    fullWidth && 'flex-1'\n  ];\n\n  const sizeClasses = {\n    sm: 'px-3 py-2 text-sm min-h-[40px]',\n    md: 'px-4 py-2.5 text-base min-h-[44px]',\n    lg: 'px-6 py-3 text-lg min-h-[48px]'\n  };\n\n  const variantClasses = {\n    default: {\n      base: 'border-b-2 -mb-px',\n      active: 'border-blue-600 text-blue-600',\n      inactive: 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n    },\n    pills: {\n      base: 'rounded-lg',\n      active: 'bg-white text-blue-600 shadow-sm',\n      inactive: 'text-gray-600 hover:text-gray-900 hover:bg-white/50'\n    },\n    underline: {\n      base: 'border-b-2 pb-2',\n      active: 'border-blue-600 text-blue-600',\n      inactive: 'border-transparent text-gray-500 hover:text-gray-700'\n    }\n  };\n\n  const currentVariant = variantClasses[variant];\n\n  return (\n    <button\n      role=\"tab\"\n      aria-selected={isActive}\n      aria-controls={`tabpanel-${tab.id}`}\n      aria-label={tab['aria-label'] || tab.label}\n      tabIndex={tabIndex}\n      disabled={isDisabled}\n      className={cn(\n        baseClasses,\n        sizeClasses[size],\n        currentVariant.base,\n        isActive ? currentVariant.active : currentVariant.inactive,\n        isDisabled && 'opacity-50 cursor-not-allowed'\n      )}\n      onClick={onClick}\n      onKeyDown={onKeyDown}\n    >\n      {tab.icon && (\n        <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n          {tab.icon}\n        </span>\n      )}\n      \n      <span className=\"truncate\">\n        {tab.label}\n      </span>\n      \n      {tab.badge && (\n        <span\n          className={cn(\n            'inline-flex items-center justify-center',\n            'min-w-[20px] h-5 px-1.5',\n            'text-xs font-medium',\n            'bg-red-100 text-red-800 rounded-full',\n            'ml-1'\n          )}\n          aria-label={`${tab.badge} notifications`}\n        >\n          {tab.badge}\n        </span>\n      )}\n    </button>\n  );\n};\n\n// Mobile TabBar variant for bottom navigation\nexport interface MobileTabBarProps extends Omit<TabBarProps, 'variant' | 'size'> {\n  fixed?: boolean;\n}\n\nexport const MobileTabBar: React.FC<MobileTabBarProps> = ({\n  tabs,\n  activeTab,\n  onTabChange,\n  className,\n  fixed = true\n}) => {\n  return (\n    <nav\n      className={cn(\n        'flex bg-white border-t border-gray-200',\n        'h-16 px-2',\n        fixed && 'fixed bottom-0 left-0 right-0 z-40',\n        className\n      )}\n      role=\"tablist\"\n      aria-orientation=\"horizontal\"\n      aria-label=\"Main navigation\"\n    >\n      {tabs.map((tab) => {\n        const isActive = tab.id === activeTab;\n        const isDisabled = tab.disabled;\n\n        return (\n          <button\n            key={tab.id}\n            role=\"tab\"\n            aria-selected={isActive}\n            aria-controls={`tabpanel-${tab.id}`}\n            aria-label={tab['aria-label'] || tab.label}\n            disabled={isDisabled}\n            className={cn(\n              'flex-1 flex flex-col items-center justify-center gap-1',\n              'py-2 px-1 min-h-[44px]',\n              'text-xs font-medium transition-colors duration-200',\n              'focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500',\n              isActive\n                ? 'text-blue-600'\n                : 'text-gray-500 hover:text-gray-700',\n              isDisabled && 'opacity-50 cursor-not-allowed'\n            )}\n            onClick={() => !isDisabled && onTabChange(tab.id)}\n          >\n            {tab.icon && (\n              <span className=\"flex-shrink-0 relative\" aria-hidden=\"true\">\n                {tab.icon}\n                {tab.badge && (\n                  <span\n                    className={cn(\n                      'absolute -top-1 -right-1',\n                      'inline-flex items-center justify-center',\n                      'min-w-[16px] h-4 px-1',\n                      'text-xs font-medium',\n                      'bg-red-500 text-white rounded-full'\n                    )}\n                    aria-label={`${tab.badge} notifications`}\n                  >\n                    {tab.badge}\n                  </span>\n                )}\n              </span>\n            )}\n            \n            <span className=\"truncate max-w-full\">\n              {tab.label}\n            </span>\n          </button>\n        );\n      })}\n    </nav>\n  );\n};\n\nexport { TabBar };\n