// Container Component - Responsive Layout System\n// Mobile-first responsive container with proper spacing\n\nimport React from 'react';\nimport { cn } from '../../utils/cn';\n\nexport interface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  padding?: 'none' | 'sm' | 'md' | 'lg';\n  center?: boolean;\n  as?: React.ElementType;\n}\n\nconst Container = React.forwardRef<HTMLDivElement, ContainerProps>(\n  ({\n    className,\n    size = 'lg',\n    padding = 'md',\n    center = true,\n    as: Component = 'div',\n    children,\n    ...props\n  }, ref) => {\n    const baseClasses = [\n      'w-full',\n      center && 'mx-auto'\n    ];\n\n    const sizeClasses = {\n      sm: 'max-w-sm',      // 384px\n      md: 'max-w-2xl',     // 672px\n      lg: 'max-w-4xl',     // 896px\n      xl: 'max-w-6xl',     // 1152px\n      full: 'max-w-none'   // No max width\n    };\n\n    const paddingClasses = {\n      none: '',\n      sm: 'px-4 py-2',\n      md: 'px-4 py-4 md:px-6 md:py-6',\n      lg: 'px-4 py-6 md:px-8 md:py-8'\n    };\n\n    return (\n      <Component\n        ref={ref}\n        className={cn(\n          baseClasses,\n          sizeClasses[size],\n          paddingClasses[padding],\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n\nContainer.displayName = 'Container';\n\n// Grid Container for responsive layouts\nexport interface GridProps extends React.HTMLAttributes<HTMLDivElement> {\n  cols?: 1 | 2 | 3 | 4 | 6 | 12;\n  gap?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  responsive?: {\n    sm?: 1 | 2 | 3 | 4 | 6 | 12;\n    md?: 1 | 2 | 3 | 4 | 6 | 12;\n    lg?: 1 | 2 | 3 | 4 | 6 | 12;\n    xl?: 1 | 2 | 3 | 4 | 6 | 12;\n  };\n}\n\nexport const Grid: React.FC<GridProps> = ({\n  className,\n  cols = 1,\n  gap = 'md',\n  responsive,\n  children,\n  ...props\n}) => {\n  const baseClasses = ['grid'];\n\n  const colsClasses = {\n    1: 'grid-cols-1',\n    2: 'grid-cols-2',\n    3: 'grid-cols-3',\n    4: 'grid-cols-4',\n    6: 'grid-cols-6',\n    12: 'grid-cols-12'\n  };\n\n  const gapClasses = {\n    none: 'gap-0',\n    sm: 'gap-2',\n    md: 'gap-4',\n    lg: 'gap-6',\n    xl: 'gap-8'\n  };\n\n  const responsiveClasses = responsive ? [\n    responsive.sm && `sm:grid-cols-${responsive.sm}`,\n    responsive.md && `md:grid-cols-${responsive.md}`,\n    responsive.lg && `lg:grid-cols-${responsive.lg}`,\n    responsive.xl && `xl:grid-cols-${responsive.xl}`\n  ].filter(Boolean) : [];\n\n  return (\n    <div\n      className={cn(\n        baseClasses,\n        colsClasses[cols],\n        gapClasses[gap],\n        responsiveClasses,\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Flex Container for flexible layouts\nexport interface FlexProps extends React.HTMLAttributes<HTMLDivElement> {\n  direction?: 'row' | 'col' | 'row-reverse' | 'col-reverse';\n  align?: 'start' | 'center' | 'end' | 'stretch' | 'baseline';\n  justify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';\n  wrap?: boolean;\n  gap?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n}\n\nexport const Flex: React.FC<FlexProps> = ({\n  className,\n  direction = 'row',\n  align = 'start',\n  justify = 'start',\n  wrap = false,\n  gap = 'none',\n  children,\n  ...props\n}) => {\n  const baseClasses = ['flex'];\n\n  const directionClasses = {\n    row: 'flex-row',\n    col: 'flex-col',\n    'row-reverse': 'flex-row-reverse',\n    'col-reverse': 'flex-col-reverse'\n  };\n\n  const alignClasses = {\n    start: 'items-start',\n    center: 'items-center',\n    end: 'items-end',\n    stretch: 'items-stretch',\n    baseline: 'items-baseline'\n  };\n\n  const justifyClasses = {\n    start: 'justify-start',\n    center: 'justify-center',\n    end: 'justify-end',\n    between: 'justify-between',\n    around: 'justify-around',\n    evenly: 'justify-evenly'\n  };\n\n  const gapClasses = {\n    none: '',\n    sm: 'gap-2',\n    md: 'gap-4',\n    lg: 'gap-6',\n    xl: 'gap-8'\n  };\n\n  return (\n    <div\n      className={cn(\n        baseClasses,\n        directionClasses[direction],\n        alignClasses[align],\n        justifyClasses[justify],\n        wrap && 'flex-wrap',\n        gapClasses[gap],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Stack for vertical layouts with consistent spacing\nexport interface StackProps extends React.HTMLAttributes<HTMLDivElement> {\n  spacing?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  align?: 'start' | 'center' | 'end' | 'stretch';\n}\n\nexport const Stack: React.FC<StackProps> = ({\n  className,\n  spacing = 'md',\n  align = 'stretch',\n  children,\n  ...props\n}) => {\n  const spacingClasses = {\n    none: 'space-y-0',\n    xs: 'space-y-1',\n    sm: 'space-y-2',\n    md: 'space-y-4',\n    lg: 'space-y-6',\n    xl: 'space-y-8'\n  };\n\n  const alignClasses = {\n    start: 'items-start',\n    center: 'items-center',\n    end: 'items-end',\n    stretch: 'items-stretch'\n  };\n\n  return (\n    <div\n      className={cn(\n        'flex flex-col',\n        spacingClasses[spacing],\n        alignClasses[align],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Responsive visibility utilities\nexport interface ShowProps extends React.HTMLAttributes<HTMLDivElement> {\n  above?: 'sm' | 'md' | 'lg' | 'xl';\n  below?: 'sm' | 'md' | 'lg' | 'xl';\n  only?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nexport const Show: React.FC<ShowProps> = ({\n  className,\n  above,\n  below,\n  only,\n  children,\n  ...props\n}) => {\n  let visibilityClasses = [];\n\n  if (above) {\n    visibilityClasses.push('hidden', `${above}:block`);\n  }\n\n  if (below) {\n    const breakpoints = ['sm', 'md', 'lg', 'xl'];\n    const index = breakpoints.indexOf(below);\n    if (index > 0) {\n      visibilityClasses.push('block', `${breakpoints[index]}:hidden`);\n    }\n  }\n\n  if (only) {\n    const breakpoints = ['sm', 'md', 'lg', 'xl'];\n    const index = breakpoints.indexOf(only);\n    \n    if (index === 0) {\n      visibilityClasses.push('block', 'md:hidden');\n    } else if (index === breakpoints.length - 1) {\n      visibilityClasses.push('hidden', `${only}:block`);\n    } else {\n      const prev = breakpoints[index - 1];\n      const next = breakpoints[index + 1];\n      visibilityClasses.push('hidden', `${only}:block`, `${next}:hidden`);\n    }\n  }\n\n  return (\n    <div\n      className={cn(visibilityClasses, className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport { Container };\n