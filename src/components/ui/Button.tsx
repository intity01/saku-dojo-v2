// Button Component - Light Theme Specification
// Accessible button component with proper touch targets and focus states

import React from 'react';\nimport { cn } from '../../utils/cn';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'ghost' | 'danger';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  icon?: React.ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({\n    className,\n    variant = 'primary',\n    size = 'md',\n    loading = false,\n    icon,\n    iconPosition = 'left',\n    fullWidth = false,\n    disabled,\n    children,\n    ...props\n  }, ref) => {\n    const baseClasses = [\n      // Base styles\n      'inline-flex items-center justify-center gap-2',\n      'font-medium transition-all duration-200',\n      'focus:outline-none focus:ring-2 focus:ring-offset-2',\n      'disabled:opacity-50 disabled:cursor-not-allowed',\n      'select-none',\n      \n      // Touch targets (minimum 44x44px)\n      'min-h-[44px] min-w-[44px]',\n      \n      // Full width\n      fullWidth && 'w-full'\n    ];\n\n    const variantClasses = {\n      primary: [\n        'bg-blue-600 text-white',\n        'hover:bg-blue-700 active:bg-blue-800',\n        'focus:ring-blue-500',\n        'shadow-sm hover:shadow-md'\n      ],\n      secondary: [\n        'bg-white text-gray-900 border border-gray-300',\n        'hover:bg-gray-50 active:bg-gray-100',\n        'focus:ring-blue-500',\n        'shadow-sm hover:shadow-md'\n      ],\n      ghost: [\n        'bg-transparent text-gray-700',\n        'hover:bg-gray-100 active:bg-gray-200',\n        'focus:ring-gray-500'\n      ],\n      danger: [\n        'bg-red-600 text-white',\n        'hover:bg-red-700 active:bg-red-800',\n        'focus:ring-red-500',\n        'shadow-sm hover:shadow-md'\n      ]\n    };\n\n    const sizeClasses = {\n      sm: 'px-3 py-2 text-sm rounded-lg',\n      md: 'px-4 py-2.5 text-base rounded-xl',\n      lg: 'px-6 py-3 text-lg rounded-xl'\n    };\n\n    const isDisabled = disabled || loading;\n\n    return (\n      <button\n        ref={ref}\n        className={cn(\n          baseClasses,\n          variantClasses[variant],\n          sizeClasses[size],\n          className\n        )}\n        disabled={isDisabled}\n        aria-disabled={isDisabled}\n        {...props}\n      >\n        {loading && (\n          <svg\n            className=\"animate-spin h-4 w-4\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            aria-hidden=\"true\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            />\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            />\n          </svg>\n        )}\n        \n        {icon && iconPosition === 'left' && !loading && (\n          <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n            {icon}\n          </span>\n        )}\n        \n        {children && (\n          <span className={cn(\n            'truncate',\n            (icon || loading) && 'ml-0'\n          )}>\n            {children}\n          </span>\n        )}\n        \n        {icon && iconPosition === 'right' && !loading && (\n          <span className=\"flex-shrink-0\" aria-hidden=\"true\">\n            {icon}\n          </span>\n        )}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button };\n\n// Icon Button variant for compact actions\nexport interface IconButtonProps extends Omit<ButtonProps, 'children' | 'icon' | 'iconPosition'> {\n  icon: React.ReactNode;\n  'aria-label': string;\n}\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(\n  ({ icon, className, size = 'md', ...props }, ref) => {\n    const sizeClasses = {\n      sm: 'h-8 w-8 p-1',\n      md: 'h-10 w-10 p-2',\n      lg: 'h-12 w-12 p-3'\n    };\n\n    return (\n      <Button\n        ref={ref}\n        className={cn(\n          'rounded-full',\n          sizeClasses[size],\n          className\n        )}\n        size={size}\n        {...props}\n      >\n        <span className=\"flex items-center justify-center\" aria-hidden=\"true\">\n          {icon}\n        </span>\n      </Button>\n    );\n  }\n);\n\nIconButton.displayName = 'IconButton';\n