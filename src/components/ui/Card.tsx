// Card Component - Light Theme Specification\n// Flexible card component with proper elevation and accessibility\n\nimport React from 'react';\nimport { cn } from '../../utils/cn';\n\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'default' | 'outlined' | 'elevated' | 'interactive';\n  padding?: 'none' | 'sm' | 'md' | 'lg';\n  radius?: 'sm' | 'md' | 'lg' | 'xl';\n  as?: React.ElementType;\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({\n    className,\n    variant = 'default',\n    padding = 'md',\n    radius = 'lg',\n    as: Component = 'div',\n    children,\n    ...props\n  }, ref) => {\n    const baseClasses = [\n      'bg-white',\n      'transition-all duration-200'\n    ];\n\n    const variantClasses = {\n      default: 'border border-gray-200',\n      outlined: 'border-2 border-gray-300',\n      elevated: 'shadow-md border border-gray-100',\n      interactive: [\n        'border border-gray-200 cursor-pointer',\n        'hover:shadow-md hover:border-gray-300',\n        'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\n        'active:scale-[0.98]'\n      ]\n    };\n\n    const paddingClasses = {\n      none: '',\n      sm: 'p-3',\n      md: 'p-4',\n      lg: 'p-6'\n    };\n\n    const radiusClasses = {\n      sm: 'rounded-lg',\n      md: 'rounded-xl',\n      lg: 'rounded-2xl',\n      xl: 'rounded-3xl'\n    };\n\n    return (\n      <Component\n        ref={ref}\n        className={cn(\n          baseClasses,\n          variantClasses[variant],\n          paddingClasses[padding],\n          radiusClasses[radius],\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n\nCard.displayName = 'Card';\n\n// Card Header\nexport interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string;\n  subtitle?: string;\n  action?: React.ReactNode;\n}\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({\n  className,\n  title,\n  subtitle,\n  action,\n  children,\n  ...props\n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-start justify-between gap-4',\n        'pb-4 border-b border-gray-100',\n        className\n      )}\n      {...props}\n    >\n      <div className=\"min-w-0 flex-1\">\n        {title && (\n          <h3 className=\"text-lg font-semibold text-gray-900 truncate\">\n            {title}\n          </h3>\n        )}\n        {subtitle && (\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {subtitle}\n          </p>\n        )}\n        {children}\n      </div>\n      \n      {action && (\n        <div className=\"flex-shrink-0\">\n          {action}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Card Content\nexport interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  spacing?: 'none' | 'sm' | 'md' | 'lg';\n}\n\nexport const CardContent: React.FC<CardContentProps> = ({\n  className,\n  spacing = 'md',\n  children,\n  ...props\n}) => {\n  const spacingClasses = {\n    none: '',\n    sm: 'py-2',\n    md: 'py-4',\n    lg: 'py-6'\n  };\n\n  return (\n    <div\n      className={cn(\n        spacingClasses[spacing],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Card Footer\nexport interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {\n  justify?: 'start' | 'center' | 'end' | 'between';\n}\n\nexport const CardFooter: React.FC<CardFooterProps> = ({\n  className,\n  justify = 'end',\n  children,\n  ...props\n}) => {\n  const justifyClasses = {\n    start: 'justify-start',\n    center: 'justify-center',\n    end: 'justify-end',\n    between: 'justify-between'\n  };\n\n  return (\n    <div\n      className={cn(\n        'flex items-center gap-3',\n        'pt-4 border-t border-gray-100',\n        justifyClasses[justify],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Question Card - specialized for learning content\nexport interface QuestionCardProps extends Omit<CardProps, 'children'> {\n  question: {\n    id: string;\n    prompt: string;\n    type: 'vocab' | 'grammar' | 'reading' | 'listening' | 'pronunciation' | 'conversation';\n    level?: string;\n    tags?: string[];\n    source?: {\n      name: string;\n      license: string;\n      attribution: string;\n    };\n  };\n  onSelect?: (questionId: string) => void;\n  selected?: boolean;\n  showSource?: boolean;\n}\n\nexport const QuestionCard: React.FC<QuestionCardProps> = ({\n  question,\n  onSelect,\n  selected = false,\n  showSource = true,\n  className,\n  ...props\n}) => {\n  const typeColors = {\n    vocab: 'bg-blue-100 text-blue-800',\n    grammar: 'bg-green-100 text-green-800',\n    reading: 'bg-purple-100 text-purple-800',\n    listening: 'bg-orange-100 text-orange-800',\n    pronunciation: 'bg-pink-100 text-pink-800',\n    conversation: 'bg-indigo-100 text-indigo-800'\n  };\n\n  const licenseColors = {\n    'CC-BY': 'bg-emerald-100 text-emerald-800',\n    'CC-BY-SA': 'bg-emerald-100 text-emerald-800',\n    'CC-BY-NC': 'bg-yellow-100 text-yellow-800',\n    'CC-BY-NC-SA': 'bg-yellow-100 text-yellow-800',\n    'EDRDG': 'bg-blue-100 text-blue-800',\n    'Public-Domain': 'bg-gray-100 text-gray-800',\n    'Other': 'bg-gray-100 text-gray-800'\n  };\n\n  return (\n    <Card\n      variant={selected ? 'interactive' : 'default'}\n      className={cn(\n        selected && 'ring-2 ring-blue-500 border-blue-300',\n        onSelect && 'cursor-pointer',\n        className\n      )}\n      onClick={() => onSelect?.(question.id)}\n      role={onSelect ? 'button' : undefined}\n      tabIndex={onSelect ? 0 : undefined}\n      aria-pressed={onSelect ? selected : undefined}\n      onKeyDown={(e) => {\n        if (onSelect && (e.key === 'Enter' || e.key === ' ')) {\n          e.preventDefault();\n          onSelect(question.id);\n        }\n      }}\n      {...props}\n    >\n      <CardContent spacing=\"sm\">\n        {/* Question type and level */}\n        <div className=\"flex items-center gap-2 mb-3\">\n          <span\n            className={cn(\n              'inline-flex items-center px-2 py-1',\n              'text-xs font-medium rounded-md',\n              typeColors[question.type]\n            )}\n          >\n            {question.type}\n          </span>\n          \n          {question.level && (\n            <span className=\"text-xs text-gray-500 font-medium\">\n              {question.level}\n            </span>\n          )}\n        </div>\n\n        {/* Question prompt */}\n        <p className=\"text-gray-900 font-medium mb-3 line-clamp-3\">\n          {question.prompt}\n        </p>\n\n        {/* Tags */}\n        {question.tags && question.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            {question.tags.slice(0, 3).map((tag) => (\n              <span\n                key={tag}\n                className=\"inline-flex items-center px-2 py-0.5 text-xs text-gray-600 bg-gray-100 rounded-md\"\n              >\n                {tag}\n              </span>\n            ))}\n            {question.tags.length > 3 && (\n              <span className=\"text-xs text-gray-500\">\n                +{question.tags.length - 3} more\n              </span>\n            )}\n          </div>\n        )}\n\n        {/* Source attribution */}\n        {showSource && question.source && (\n          <div className=\"flex items-center justify-between text-xs text-gray-500 pt-2 border-t border-gray-100\">\n            <span className=\"truncate\">\n              {question.source.name}\n            </span>\n            <span\n              className={cn(\n                'inline-flex items-center px-1.5 py-0.5',\n                'font-medium rounded',\n                licenseColors[question.source.license as keyof typeof licenseColors] || licenseColors.Other\n              )}\n              title={question.source.attribution}\n            >\n              {question.source.license}\n            </span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport { Card };\n