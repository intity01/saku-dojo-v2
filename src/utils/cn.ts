// Class Name Utility\n// Utility for merging Tailwind CSS classes with proper precedence\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Combines class names with proper Tailwind CSS precedence\n * Uses clsx for conditional classes and tailwind-merge for deduplication\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Utility for creating responsive class variants\n */\nexport function responsive(base: string, variants: Record<string, string>) {\n  return cn(\n    base,\n    Object.entries(variants).map(([breakpoint, classes]) => \n      breakpoint === 'default' ? classes : `${breakpoint}:${classes}`\n    )\n  );\n}\n\n/**\n * Utility for creating conditional classes based on state\n */\nexport function conditional(\n  condition: boolean | undefined,\n  trueClasses: string,\n  falseClasses?: string\n) {\n  return condition ? trueClasses : falseClasses || '';\n}\n\n/**\n * Utility for creating variant-based classes\n */\nexport function variant<T extends string>(\n  current: T,\n  variants: Record<T, string>\n) {\n  return variants[current] || '';\n}\n