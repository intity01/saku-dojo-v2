// Dojo Engine - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Saku Dojo v2
// Core session management system for Saku Dojo v2

import type {
  Track,
  Framework,
  Mode,
  Question,
  MCQ,
  Typing,
  Open,
  ProgressEntry,
  SessionProgress,
  AnswerResult,
  QuestionBank
} from '../types/core';
import { isMCQ, isTyping, isOpen } from '../types/core';
import { shuffle, calculateScore, getCurrentDate, normalize } from '../utils';
import { SESSION_CONFIG } from '../config/constants';

/**
 * ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * Session state enumeration
 */
export enum SessionState {
  IDLE = 'idle',           // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  ACTIVE = 'active',       // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  COMPLETED = 'completed', // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  PAUSED = 'paused'        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
}

/**
 * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
 * Session configuration interface
 */
export interface SessionConfig {
  track: Track;           // ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  framework: Framework;   // ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
  level: string;          // ‡∏£‡∏∞‡∏î‡∏±‡∏ö
  mode: Mode;             // ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  questionCount?: number; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
  shuffleQuestions?: boolean; // ‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

/**
 * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * Current session data
 */
export interface SessionData {
  config: SessionConfig;     // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  questions: Question[];     // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  currentIndex: number;      // ‡∏Ç‡πâ‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  answers: (string | number | null)[]; // ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ
  correctAnswers: boolean[]; // ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö (‡∏ñ‡∏π‡∏Å/‡∏ú‡∏¥‡∏î)
  startTime: number;         // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  endTime?: number;          // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
  state: SessionState;       // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
}

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
 * Main Dojo Engine class for managing learning sessions
 */
export class DojoEngine {
  private currentSession: SessionData | null = null;
  private questionBank: QuestionBank;

  constructor(questionBank: QuestionBank) {
    this.questionBank = questionBank;
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
   * Start a new learning session
   * @param config ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô / Session configuration
   * @returns ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà / Success status
   */
  startSession(config: SessionConfig): boolean {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á / Get questions from bank
      const questions = this.getQuestionsForSession(config);

      if (questions.length === 0) {
        console.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${config.track}/${config.framework}/${config.level}`);
        return false;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà / Create new session
      this.currentSession = {
        config,
        questions: config.shuffleQuestions !== false ? shuffle(questions) : questions,
        currentIndex: 0,
        answers: new Array(questions.length).fill(null),
        correctAnswers: new Array(questions.length).fill(false),
        startTime: Date.now(),
        state: SessionState.ACTIVE
      };

      console.log(`üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ${config.mode}: ${questions.length} ‡∏Ç‡πâ‡∏≠`);
      return true;
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô:', error);
      return false;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   * Get current question
   * @returns ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ null / Current question or null
   */
  getCurrentQuestion(): Question | null {
    if (!this.currentSession || this.currentSession.state !== SessionState.ACTIVE) {
      return null;
    }

    const { questions, currentIndex } = this.currentSession;
    return questions[currentIndex] || null;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
   * Get session progress
   * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤ / Progress information
   */
  getSessionProgress(): SessionProgress {
    if (!this.currentSession) {
      return { current: 0, total: 0, correct: 0 };
    }

    const { currentIndex, questions, correctAnswers } = this.currentSession;
    const correct = correctAnswers.filter(Boolean).length;

    return {
      current: Math.min(currentIndex + 1, questions.length),
      total: questions.length,
      correct
    };
  }

  /**
   * ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ö (MCQ)
   * Answer multiple choice question
   * @param choiceIndex ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å / Selected choice index
   * @returns ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö / Answer result
   */
  answerMCQ(choiceIndex: number): AnswerResult {
    const question = this.getCurrentQuestion();

    if (!question || !isMCQ(question) || !this.currentSession) {
      return { isCorrect: false, explanation: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° MCQ' };
    }

    const mcqQuestion = question as MCQ;
    const isCorrect = choiceIndex === mcqQuestion.answerIndex;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö / Record answer
    this.currentSession.answers[this.currentSession.currentIndex] = choiceIndex;
    this.currentSession.correctAnswers[this.currentSession.currentIndex] = isCorrect;

    const result: AnswerResult = {
      isCorrect
    };

    const correctChoice = mcqQuestion.choices[mcqQuestion.answerIndex];
    if (correctChoice) {
      result.correctAnswer = correctChoice;
    }

    if (mcqQuestion.explanation) {
      result.explanation = mcqQuestion.explanation;
    }

    return result;
  }

  /**
   * ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå (Typing)
   * Answer typing question
   * @param input ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå / Typed answer
   * @returns ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö / Answer result
   */
  answerTyping(input: string): AnswerResult {
    const question = this.getCurrentQuestion();

    if (!question || !isTyping(question) || !this.currentSession) {
      return { isCorrect: false, explanation: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° Typing' };
    }

    const typingQuestion = question as Typing;
    const normalizedInput = normalize(input);
    const acceptableAnswers = typingQuestion.accept.map(normalize);
    const isCorrect = acceptableAnswers.includes(normalizedInput);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö / Record answer
    this.currentSession.answers[this.currentSession.currentIndex] = input;
    this.currentSession.correctAnswers[this.currentSession.currentIndex] = isCorrect;

    const result: AnswerResult = {
      isCorrect
    };

    if (typingQuestion.accept.length > 0) {
      result.correctAnswer = typingQuestion.accept;
    }

    if (typingQuestion.explanation) {
      result.explanation = typingQuestion.explanation;
    }

    return result;
  }

  /**
   * ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î (Open)
   * Answer open-ended question
   * @param input ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö / Answer input
   * @returns ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö / Answer result
   */
  answerOpen(input: string): AnswerResult {
    const question = this.getCurrentQuestion();

    if (!question || !isOpen(question) || !this.currentSession) {
      return { isCorrect: false, explanation: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° Open' };
    }

    const openQuestion = question as Open;

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    // Open questions don't have automatic scoring
    this.currentSession.answers[this.currentSession.currentIndex] = input;
    this.currentSession.correctAnswers[this.currentSession.currentIndex] = true; // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏™‡∏°‡∏≠

    const result: AnswerResult = {
      isCorrect: true // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î
    };

    if (openQuestion.explanation) {
      result.explanation = openQuestion.explanation;
    }

    return result;
  }

  /**
   * ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   * Move to next question
   * @returns ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà / Success status
   */
  nextQuestion(): boolean {
    if (!this.currentSession || this.currentSession.state !== SessionState.ACTIVE) {
      return false;
    }

    const { questions, currentIndex } = this.currentSession;

    if (currentIndex < questions.length - 1) {
      this.currentSession.currentIndex++;
      return true;
    } else {
      // ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô / Session completed
      this.currentSession.state = SessionState.COMPLETED;
      this.currentSession.endTime = Date.now();
      return false;
    }
  }

  /**
   * ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
   * Move to previous question
   * @returns ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà / Success status
   */
  previousQuestion(): boolean {
    if (!this.currentSession || this.currentSession.state !== SessionState.ACTIVE) {
      return false;
    }

    if (this.currentSession.currentIndex > 0) {
      this.currentSession.currentIndex--;
      return true;
    }

    return false;
  }

  /**
   * ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   * Skip current question
   * @returns ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà / Success status
   */
  skipQuestion(): boolean {
    if (!this.currentSession) {
      return false;
    }

    // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏° / Mark as skipped
    this.currentSession.answers[this.currentSession.currentIndex] = null;
    this.currentSession.correctAnswers[this.currentSession.currentIndex] = false;

    return this.nextQuestion();
  }

  /**
   * ‡∏à‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•
   * Finish session and generate progress entry
   * @returns ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / Progress entry
   */
  finishSession(): ProgressEntry | null {
    if (!this.currentSession) {
      return null;
    }

    const { config, correctAnswers } = this.currentSession;
    const total = correctAnswers.length;
    const correct = correctAnswers.filter(Boolean).length;
    const scorePct = calculateScore(correct, total);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ / Update state
    this.currentSession.state = SessionState.COMPLETED;
    this.currentSession.endTime = Date.now();

    const progressEntry: ProgressEntry = {
      date: getCurrentDate(),
      track: config.track,
      framework: config.framework,
      level: config.level,
      mode: config.mode,
      scorePct,
      total,
      correct
    };

    console.log(`‚úÖ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${correct}/${total} (${scorePct}%)`);

    // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô / Clear session
    this.currentSession = null;

    return progressEntry;
  }

  /**
   * ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏à‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≠‡πÑ‡∏´‡∏ô)
   * Force finish session immediately
   * @returns ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / Progress entry
   */
  forceFinishSession(): ProgressEntry | null {
    if (!this.currentSession) {
      return null;
    }

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô COMPLETED ‡∏Å‡πà‡∏≠‡∏ô
    this.currentSession.state = SessionState.COMPLETED;
    return this.finishSession();
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
   * Reset current session
   */
  resetSession(): void {
    if (this.currentSession) {
      console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô');
      this.currentSession = null;
    }
  }

  /**
   * ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
   * Pause current session
   */
  pauseSession(): boolean {
    if (this.currentSession && this.currentSession.state === SessionState.ACTIVE) {
      this.currentSession.state = SessionState.PAUSED;
      console.log('‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß');
      return true;
    }
    return false;
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≠
   * Resume paused session
   */
  resumeSession(): boolean {
    if (this.currentSession && this.currentSession.state === SessionState.PAUSED) {
      this.currentSession.state = SessionState.ACTIVE;
      console.log('‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≠');
      return true;
    }
    return false;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
   * Check session state
   * @returns ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô / Current state
   */
  getSessionState(): SessionState {
    return this.currentSession?.state || SessionState.IDLE;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
   * Get questions for session based on configuration
   * @param config ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô / Session configuration
   * @returns ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° / Array of questions
   */
  private getQuestionsForSession(config: SessionConfig): Question[] {
    const { track, framework, level, mode, questionCount } = config;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // Check if questions exist in bank
    const trackBank = this.questionBank[track];
    if (!trackBank) return [];

    const frameworkBank = trackBank[framework];
    if (!frameworkBank) return [];

    const levelQuestions = frameworkBank[level];
    if (!levelQuestions || levelQuestions.length === 0) return [];

    let questions = [...levelQuestions];

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    // Adjust question count based on mode
    switch (mode) {
      case 'Quiz':
        const minQuestions = SESSION_CONFIG.QUIZ_MIN_QUESTIONS;
        const maxQuestions = SESSION_CONFIG.QUIZ_MAX_QUESTIONS;
        const targetCount = questionCount || Math.min(maxQuestions, questions.length);
        questions = questions.slice(0, Math.max(minQuestions, targetCount));
        break;

      case 'Exam':
        const examCount = questionCount || SESSION_CONFIG.EXAM_QUESTIONS;
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Exam ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö
        // For Exam, might include questions from multiple levels
        questions = questions.slice(0, examCount);
        break;

      case 'Study':
        // Study mode ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        // Study mode shows all questions
        break;

      case 'Read':
      case 'Write':
        // ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©
        // These modes might have special questions
        break;
    }

    return questions;
  }
}