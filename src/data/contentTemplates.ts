// Content Generation Templates\n// Templates and patterns for generating high-quality educational content\n\nimport type { QuestionItem, VocabularyItem, GrammarItem, ReadingItem } from '../types/questionBank';\n\nexport interface ContentTemplate {\n  id: string;\n  name: string;\n  description: string;\n  type: 'vocab' | 'grammar' | 'reading' | 'listening' | 'pronunciation' | 'conversation';\n  language: 'EN' | 'JP' | 'TH';\n  level: string;\n  pattern: string;\n  variables: string[];\n  examples: string[];\n  tags: string[];\n}\n\nexport interface GenerationContext {\n  word?: string;\n  meaning?: string;\n  partOfSpeech?: string;\n  level?: string;\n  topic?: string;\n  difficulty?: number;\n  examples?: string[];\n}\n\n// English vocabulary templates\nexport const ENGLISH_VOCAB_TEMPLATES: ContentTemplate[] = [\n  {\n    id: 'en-vocab-definition',\n    name: 'Definition Question',\n    description: 'Basic definition question for vocabulary',\n    type: 'vocab',\n    language: 'EN',\n    level: 'A1-B2',\n    pattern: 'What does \"{word}\" mean?',\n    variables: ['word'],\n    examples: [\n      'What does \"house\" mean?',\n      'What does \"beautiful\" mean?',\n      'What does \"analyze\" mean?'\n    ],\n    tags: ['definition', 'vocabulary', 'basic']\n  },\n  {\n    id: 'en-vocab-context',\n    name: 'Context Usage',\n    description: 'Vocabulary in context with example sentence',\n    type: 'vocab',\n    language: 'EN',\n    level: 'A2-C1',\n    pattern: 'In the sentence \"{example}\", what does \"{word}\" mean?',\n    variables: ['word', 'example'],\n    examples: [\n      'In the sentence \"The house is very spacious\", what does \"spacious\" mean?',\n      'In the sentence \"She analyzed the data carefully\", what does \"analyzed\" mean?'\n    ],\n    tags: ['context', 'vocabulary', 'sentence']\n  },\n  {\n    id: 'en-vocab-synonym',\n    name: 'Synonym Selection',\n    description: 'Choose the best synonym for the given word',\n    type: 'vocab',\n    language: 'EN',\n    level: 'B1-C2',\n    pattern: 'Which word is closest in meaning to \"{word}\"?',\n    variables: ['word'],\n    examples: [\n      'Which word is closest in meaning to \"enormous\"?',\n      'Which word is closest in meaning to \"analyze\"?'\n    ],\n    tags: ['synonym', 'vocabulary', 'advanced']\n  },\n  {\n    id: 'en-vocab-collocations',\n    name: 'Collocations',\n    description: 'Common word combinations and collocations',\n    type: 'vocab',\n    language: 'EN',\n    level: 'B2-C2',\n    pattern: 'Which word commonly goes with \"{word}\"?',\n    variables: ['word'],\n    examples: [\n      'Which word commonly goes with \"make\"? (a decision, a mistake, a noise)',\n      'Which word commonly goes with \"heavy\"? (rain, traffic, smoker)'\n    ],\n    tags: ['collocations', 'vocabulary', 'combinations']\n  }\n];\n\n// Japanese vocabulary templates\nexport const JAPANESE_VOCAB_TEMPLATES: ContentTemplate[] = [\n  {\n    id: 'jp-vocab-meaning',\n    name: 'Kanji/Word Meaning',\n    description: 'Basic meaning question for Japanese vocabulary',\n    type: 'vocab',\n    language: 'JP',\n    level: '1-5',\n    pattern: '「{word}」の意味は何ですか？',\n    variables: ['word'],\n    examples: [\n      '「家」の意味は何ですか？',\n      '「美しい」の意味は何ですか？',\n      '「分析」の意味は何ですか？'\n    ],\n    tags: ['meaning', 'vocabulary', 'kanji']\n  },\n  {\n    id: 'jp-vocab-reading',\n    name: 'Kanji Reading',\n    description: 'How to read kanji characters',\n    type: 'vocab',\n    language: 'JP',\n    level: '2-5',\n    pattern: '「{kanji}」の読み方は？',\n    variables: ['kanji'],\n    examples: [\n      '「家」の読み方は？',\n      '「学校」の読み方は？',\n      '「分析」の読み方は？'\n    ],\n    tags: ['reading', 'kanji', 'pronunciation']\n  },\n  {\n    id: 'jp-vocab-usage',\n    name: 'Usage in Context',\n    description: 'Japanese vocabulary usage in sentences',\n    type: 'vocab',\n    language: 'JP',\n    level: '2-4',\n    pattern: '「{sentence}」の「{word}」の意味は？',\n    variables: ['sentence', 'word'],\n    examples: [\n      '「大きい家に住んでいます」の「大きい」の意味は？',\n      '「データを分析します」の「分析」の意味は？'\n    ],\n    tags: ['usage', 'context', 'sentence']\n  }\n];\n\n// Grammar templates\nexport const GRAMMAR_TEMPLATES: ContentTemplate[] = [\n  {\n    id: 'en-grammar-tense',\n    name: 'Verb Tense',\n    description: 'Verb tense identification and usage',\n    type: 'grammar',\n    language: 'EN',\n    level: 'A1-B2',\n    pattern: 'What tense is used in: \"{sentence}\"?',\n    variables: ['sentence'],\n    examples: [\n      'What tense is used in: \"I am studying English\"?',\n      'What tense is used in: \"She has finished her homework\"?'\n    ],\n    tags: ['grammar', 'tense', 'verb']\n  },\n  {\n    id: 'jp-grammar-particle',\n    name: 'Particle Usage',\n    description: 'Japanese particle selection and usage',\n    type: 'grammar',\n    language: 'JP',\n    level: '1-4',\n    pattern: '「{sentence}」に入る助詞は？',\n    variables: ['sentence'],\n    examples: [\n      '「学校（　）行きます」に入る助詞は？',\n      '「本（　）読みます」に入る助詞は？'\n    ],\n    tags: ['grammar', 'particle', 'japanese']\n  }\n];\n\n// Reading comprehension templates\nexport const READING_TEMPLATES: ContentTemplate[] = [\n  {\n    id: 'en-reading-main-idea',\n    name: 'Main Idea',\n    description: 'Identify the main idea of a passage',\n    type: 'reading',\n    language: 'EN',\n    level: 'A2-C1',\n    pattern: 'What is the main idea of this passage?',\n    variables: ['passage'],\n    examples: [\n      'What is the main idea of this passage about climate change?',\n      'What is the main idea of this passage about technology?'\n    ],\n    tags: ['reading', 'comprehension', 'main-idea']\n  },\n  {\n    id: 'jp-reading-content',\n    name: 'Content Understanding',\n    description: 'Understanding Japanese text content',\n    type: 'reading',\n    language: 'JP',\n    level: '2-5',\n    pattern: 'この文章の内容について正しいものは？',\n    variables: ['passage'],\n    examples: [\n      'この文章の内容について正しいものは？（天気について）',\n      'この文章の内容について正しいものは？（料理について）'\n    ],\n    tags: ['reading', 'comprehension', 'content']\n  }\n];\n\n// Content generation class\nexport class ContentGenerator {\n  private templates: Map<string, ContentTemplate> = new Map();\n\n  constructor() {\n    this.loadTemplates();\n  }\n\n  private loadTemplates(): void {\n    const allTemplates = [\n      ...ENGLISH_VOCAB_TEMPLATES,\n      ...JAPANESE_VOCAB_TEMPLATES,\n      ...GRAMMAR_TEMPLATES,\n      ...READING_TEMPLATES\n    ];\n\n    allTemplates.forEach(template => {\n      this.templates.set(template.id, template);\n    });\n  }\n\n  // Generate question using template\n  generateQuestion(\n    templateId: string,\n    context: GenerationContext\n  ): Partial<QuestionItem> | null {\n    const template = this.templates.get(templateId);\n    if (!template) return null;\n\n    try {\n      const prompt = this.fillTemplate(template.pattern, context);\n      const choices = this.generateChoices(template, context);\n      const explanation = this.generateExplanation(template, context);\n\n      return {\n        language: template.language,\n        type: template.type,\n        prompt,\n        choices,\n        answer: 0, // First choice is correct by default\n        explanation,\n        tags: [...template.tags, ...(context.topic ? [context.topic] : [])]\n      };\n    } catch (error) {\n      console.error(`Failed to generate question with template ${templateId}:`, error);\n      return null;\n    }\n  }\n\n  // Fill template with context variables\n  private fillTemplate(pattern: string, context: GenerationContext): string {\n    let result = pattern;\n    \n    Object.entries(context).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        result = result.replace(new RegExp(`\\\\{${key}\\\\}`, 'g'), value);\n      }\n    });\n\n    return result;\n  }\n\n  // Generate multiple choice options\n  private generateChoices(\n    template: ContentTemplate,\n    context: GenerationContext\n  ): string[] | undefined {\n    if (template.type === 'vocab' && context.meaning) {\n      return [\n        context.meaning, // Correct answer\n        this.generateDistractor(context.meaning, template.language),\n        this.generateDistractor(context.meaning, template.language),\n        this.generateDistractor(context.meaning, template.language)\n      ];\n    }\n\n    if (template.type === 'grammar') {\n      return this.generateGrammarChoices(template, context);\n    }\n\n    return undefined; // For open-ended questions\n  }\n\n  // Generate explanation\n  private generateExplanation(\n    template: ContentTemplate,\n    context: GenerationContext\n  ): string {\n    if (template.type === 'vocab' && context.word && context.meaning) {\n      if (template.language === 'EN') {\n        return `\"${context.word}\" means ${context.meaning.toLowerCase()}. ${this.getUsageExample(context.word, template.language)}`;\n      } else if (template.language === 'JP') {\n        return `「${context.word}」は${context.meaning}という意味です。${this.getUsageExample(context.word, template.language)}`;\n      }\n    }\n\n    return `This ${template.type} question helps you practice ${template.name.toLowerCase()}.`;\n  }\n\n  // Generate distractor (incorrect choice)\n  private generateDistractor(correctAnswer: string, language: 'EN' | 'JP' | 'TH'): string {\n    // Simplified distractor generation - in reality would use semantic similarity\n    const distractors = {\n      'EN': [\n        'a different meaning',\n        'an unrelated concept',\n        'another definition',\n        'something else entirely'\n      ],\n      'JP': [\n        '違う意味',\n        '関係のない概念',\n        '別の定義',\n        '全く違うもの'\n      ],\n      'TH': [\n        'ความหมายที่แตกต่าง',\n        'แนวคิดที่ไม่เกี่ยวข้อง',\n        'คำจำกัดความอื่น',\n        'สิ่งที่แตกต่างโดยสิ้นเชิง'\n      ]\n    };\n\n    const options = distractors[language] || distractors['EN'];\n    return options[Math.floor(Math.random() * options.length)];\n  }\n\n  // Generate grammar-specific choices\n  private generateGrammarChoices(\n    template: ContentTemplate,\n    context: GenerationContext\n  ): string[] {\n    if (template.id === 'en-grammar-tense') {\n      return [\n        'Present Continuous',\n        'Simple Present',\n        'Present Perfect',\n        'Past Simple'\n      ];\n    }\n\n    if (template.id === 'jp-grammar-particle') {\n      return ['に', 'を', 'が', 'で'];\n    }\n\n    return ['Option A', 'Option B', 'Option C', 'Option D'];\n  }\n\n  // Get usage example\n  private getUsageExample(word: string, language: 'EN' | 'JP' | 'TH'): string {\n    if (language === 'EN') {\n      return `Example: \"The ${word} is important in this context.\"`;\n    } else if (language === 'JP') {\n      return `例：「${word}は大切です。」`;\n    }\n    return '';\n  }\n\n  // Get templates by criteria\n  getTemplates(criteria?: {\n    type?: string;\n    language?: string;\n    level?: string;\n  }): ContentTemplate[] {\n    let templates = Array.from(this.templates.values());\n\n    if (criteria?.type) {\n      templates = templates.filter(t => t.type === criteria.type);\n    }\n\n    if (criteria?.language) {\n      templates = templates.filter(t => t.language === criteria.language);\n    }\n\n    if (criteria?.level) {\n      templates = templates.filter(t => t.level.includes(criteria.level!));\n    }\n\n    return templates;\n  }\n\n  // Add custom template\n  addTemplate(template: ContentTemplate): void {\n    this.templates.set(template.id, template);\n  }\n\n  // Remove template\n  removeTemplate(templateId: string): boolean {\n    return this.templates.delete(templateId);\n  }\n\n  // Generate batch of questions\n  generateBatch(\n    templateId: string,\n    contexts: GenerationContext[],\n    options?: {\n      shuffle?: boolean;\n      maxItems?: number;\n    }\n  ): QuestionItem[] {\n    const questions: QuestionItem[] = [];\n    const maxItems = options?.maxItems || contexts.length;\n    \n    let processedContexts = contexts.slice(0, maxItems);\n    if (options?.shuffle) {\n      processedContexts = this.shuffleArray(processedContexts);\n    }\n\n    processedContexts.forEach((context, index) => {\n      const partialQuestion = this.generateQuestion(templateId, context);\n      if (partialQuestion) {\n        const fullQuestion: QuestionItem = {\n          id: `generated_${templateId}_${index}_${Date.now()}`,\n          created: new Date().toISOString(),\n          reviewStatus: 'pending',\n          difficulty: {\n            overallDifficulty: context.difficulty || 5\n          },\n          source: {\n            name: 'Content Generator',\n            license: 'Other',\n            attribution: 'Generated using Saku Dojo content templates'\n          },\n          level: {\n            system: 'heuristic',\n            level: context.level || '3'\n          },\n          ...partialQuestion\n        } as QuestionItem;\n\n        questions.push(fullQuestion);\n      }\n    });\n\n    return questions;\n  }\n\n  // Utility method to shuffle array\n  private shuffleArray<T>(array: T[]): T[] {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  }\n}\n\n// Export singleton instance\nexport const contentGenerator = new ContentGenerator();\n