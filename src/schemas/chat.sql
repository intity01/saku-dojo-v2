-- Chat System Database Schema\n-- Comprehensive schema for multi-channel chat and feedback system\n-- Supports PostgreSQL with JSON columns and real-time features\n\n-- Enable required extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\"; -- For text search\nCREATE EXTENSION IF NOT EXISTS \"btree_gin\"; -- For composite indexes\n\n-- Enums for type safety\nCREATE TYPE message_type AS ENUM ('text', 'image', 'file', 'system', 'quick_reply', 'form');\nCREATE TYPE message_status AS ENUM ('sending', 'sent', 'delivered', 'read', 'failed');\nCREATE TYPE conversation_status AS ENUM ('new', 'open', 'waiting', 'resolved', 'closed');\nCREATE TYPE participant_role AS ENUM ('user', 'agent', 'system', 'bot');\nCREATE TYPE channel_type AS ENUM ('app', 'email', 'telegram', 'messenger', 'webhook');\nCREATE TYPE priority_level AS ENUM ('low', 'normal', 'high', 'urgent');\nCREATE TYPE sync_status AS ENUM ('synced', 'pending', 'error');\n\n-- Users table (external reference)\nCREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    email VARCHAR(255) UNIQUE,\n    name VARCHAR(255),\n    phone VARCHAR(50),\n    timezone VARCHAR(50) DEFAULT 'UTC',\n    language VARCHAR(10) DEFAULT 'th',\n    \n    -- App-specific info\n    app_version VARCHAR(50),\n    platform VARCHAR(50),\n    device_info JSONB,\n    \n    -- Learning context\n    current_level VARCHAR(50),\n    study_language VARCHAR(10),\n    learning_goals TEXT[],\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    last_seen_at TIMESTAMP WITH TIME ZONE\n);\n\n-- Conversations table\nCREATE TABLE conversations (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    \n    -- Status and priority\n    status conversation_status DEFAULT 'new',\n    priority priority_level DEFAULT 'normal',\n    category VARCHAR(100),\n    tags TEXT[] DEFAULT '{}',\n    \n    -- Assignment\n    assigned_agent_id UUID,\n    \n    -- Primary channel\n    primary_channel channel_type DEFAULT 'app',\n    \n    -- User context\n    user_id UUID REFERENCES users(id) ON DELETE SET NULL,\n    user_info JSONB, -- Snapshot of user info at conversation start\n    context JSONB, -- Page, feature, error context\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    last_message_at TIMESTAMP WITH TIME ZONE,\n    resolved_at TIMESTAMP WITH TIME ZONE,\n    closed_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Metrics\n    message_count INTEGER DEFAULT 0,\n    response_time_seconds INTEGER, -- Average response time\n    satisfaction_rating INTEGER CHECK (satisfaction_rating >= 1 AND satisfaction_rating <= 5),\n    satisfaction_feedback TEXT\n);\n\n-- Conversation participants\nCREATE TABLE conversation_participants (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,\n    \n    -- Participant info\n    participant_id VARCHAR(255) NOT NULL, -- Can be user ID, agent ID, etc.\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255),\n    role participant_role NOT NULL,\n    avatar_url TEXT,\n    \n    -- Status\n    is_online BOOLEAN DEFAULT FALSE,\n    last_seen_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Channel-specific info\n    channel_info JSONB DEFAULT '{}',\n    \n    -- Timestamps\n    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    left_at TIMESTAMP WITH TIME ZONE,\n    \n    UNIQUE(conversation_id, participant_id, role)\n);\n\n-- Conversation channels configuration\nCREATE TABLE conversation_channels (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,\n    \n    -- Channel info\n    type channel_type NOT NULL,\n    enabled BOOLEAN DEFAULT TRUE,\n    config JSONB DEFAULT '{}',\n    \n    -- Sync status\n    sync_status sync_status DEFAULT 'synced',\n    last_sync_at TIMESTAMP WITH TIME ZONE,\n    sync_error TEXT,\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    UNIQUE(conversation_id, type)\n);\n\n-- Messages table\nCREATE TABLE messages (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,\n    \n    -- Sender info\n    sender_id VARCHAR(255) NOT NULL,\n    sender_name VARCHAR(255) NOT NULL,\n    sender_role participant_role NOT NULL,\n    \n    -- Message content\n    type message_type DEFAULT 'text',\n    content TEXT NOT NULL,\n    metadata JSONB DEFAULT '{}',\n    \n    -- Status\n    status message_status DEFAULT 'sent',\n    \n    -- Channel info\n    channel channel_type DEFAULT 'app',\n    channel_message_id VARCHAR(255), -- External message ID\n    \n    -- Threading\n    reply_to_id UUID REFERENCES messages(id) ON DELETE SET NULL,\n    thread_id UUID,\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    edited_at TIMESTAMP WITH TIME ZONE,\n    \n    -- Search\n    search_vector tsvector\n);\n\n-- Message reactions\nCREATE TABLE message_reactions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    message_id UUID NOT NULL REFERENCES messages(id) ON DELETE CASCADE,\n    \n    -- Reaction info\n    emoji VARCHAR(10) NOT NULL,\n    user_id VARCHAR(255) NOT NULL,\n    user_name VARCHAR(255) NOT NULL,\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    UNIQUE(message_id, emoji, user_id)\n);\n\n-- Message read status\nCREATE TABLE message_reads (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    message_id UUID NOT NULL REFERENCES messages(id) ON DELETE CASCADE,\n    \n    -- Reader info\n    user_id VARCHAR(255) NOT NULL,\n    user_name VARCHAR(255) NOT NULL,\n    \n    -- Timestamps\n    read_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    UNIQUE(message_id, user_id)\n);\n\n-- File attachments\nCREATE TABLE attachments (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    message_id UUID NOT NULL REFERENCES messages(id) ON DELETE CASCADE,\n    \n    -- File info\n    filename VARCHAR(255) NOT NULL,\n    original_filename VARCHAR(255) NOT NULL,\n    mime_type VARCHAR(100) NOT NULL,\n    size_bytes INTEGER NOT NULL,\n    \n    -- Storage info\n    storage_path TEXT NOT NULL,\n    public_url TEXT,\n    \n    -- Media-specific info\n    width INTEGER, -- For images\n    height INTEGER, -- For images\n    duration_seconds INTEGER, -- For audio/video\n    thumbnail_url TEXT,\n    \n    -- Security\n    virus_scan_status VARCHAR(20) DEFAULT 'pending',\n    virus_scan_result TEXT,\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    expires_at TIMESTAMP WITH TIME ZONE\n);\n\n-- Typing indicators (temporary table, could use Redis instead)\nCREATE TABLE typing_indicators (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,\n    \n    -- Typer info\n    user_id VARCHAR(255) NOT NULL,\n    user_name VARCHAR(255) NOT NULL,\n    \n    -- Timestamps\n    started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    expires_at TIMESTAMP WITH TIME ZONE DEFAULT (NOW() + INTERVAL '30 seconds'),\n    \n    UNIQUE(conversation_id, user_id)\n);\n\n-- Webhook configurations\nCREATE TABLE webhook_configs (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Channel info\n    channel_type channel_type NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    \n    -- Webhook config\n    url TEXT NOT NULL,\n    secret VARCHAR(255),\n    headers JSONB DEFAULT '{}',\n    \n    -- Status\n    enabled BOOLEAN DEFAULT TRUE,\n    last_success_at TIMESTAMP WITH TIME ZONE,\n    last_error_at TIMESTAMP WITH TIME ZONE,\n    last_error TEXT,\n    \n    -- Metrics\n    total_requests INTEGER DEFAULT 0,\n    successful_requests INTEGER DEFAULT 0,\n    failed_requests INTEGER DEFAULT 0,\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Webhook delivery log\nCREATE TABLE webhook_deliveries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    webhook_config_id UUID NOT NULL REFERENCES webhook_configs(id) ON DELETE CASCADE,\n    message_id UUID REFERENCES messages(id) ON DELETE SET NULL,\n    \n    -- Request info\n    request_url TEXT NOT NULL,\n    request_method VARCHAR(10) DEFAULT 'POST',\n    request_headers JSONB,\n    request_body TEXT,\n    \n    -- Response info\n    response_status INTEGER,\n    response_headers JSONB,\n    response_body TEXT,\n    response_time_ms INTEGER,\n    \n    -- Status\n    success BOOLEAN DEFAULT FALSE,\n    error_message TEXT,\n    retry_count INTEGER DEFAULT 0,\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    delivered_at TIMESTAMP WITH TIME ZONE\n);\n\n-- Chat analytics and metrics\nCREATE TABLE chat_analytics (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    \n    -- Time period\n    date DATE NOT NULL,\n    hour INTEGER CHECK (hour >= 0 AND hour <= 23),\n    \n    -- Metrics\n    total_conversations INTEGER DEFAULT 0,\n    new_conversations INTEGER DEFAULT 0,\n    resolved_conversations INTEGER DEFAULT 0,\n    \n    total_messages INTEGER DEFAULT 0,\n    user_messages INTEGER DEFAULT 0,\n    agent_messages INTEGER DEFAULT 0,\n    \n    -- Response times (in seconds)\n    avg_first_response_time INTEGER,\n    avg_response_time INTEGER,\n    avg_resolution_time INTEGER,\n    \n    -- Satisfaction\n    satisfaction_responses INTEGER DEFAULT 0,\n    avg_satisfaction_rating DECIMAL(3,2),\n    \n    -- Channel breakdown\n    messages_by_channel JSONB DEFAULT '{}',\n    conversations_by_channel JSONB DEFAULT '{}',\n    \n    -- Timestamps\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    UNIQUE(date, hour)\n);\n\n-- Indexes for performance\n\n-- Conversations indexes\nCREATE INDEX idx_conversations_status ON conversations(status);\nCREATE INDEX idx_conversations_priority ON conversations(priority);\nCREATE INDEX idx_conversations_assigned_agent ON conversations(assigned_agent_id);\nCREATE INDEX idx_conversations_user ON conversations(user_id);\nCREATE INDEX idx_conversations_created ON conversations(created_at);\nCREATE INDEX idx_conversations_updated ON conversations(updated_at);\nCREATE INDEX idx_conversations_last_message ON conversations(last_message_at);\nCREATE INDEX idx_conversations_tags ON conversations USING GIN(tags);\n\n-- Messages indexes\nCREATE INDEX idx_messages_conversation ON messages(conversation_id);\nCREATE INDEX idx_messages_sender ON messages(sender_id);\nCREATE INDEX idx_messages_created ON messages(created_at);\nCREATE INDEX idx_messages_channel ON messages(channel);\nCREATE INDEX idx_messages_status ON messages(status);\nCREATE INDEX idx_messages_type ON messages(type);\nCREATE INDEX idx_messages_thread ON messages(thread_id);\nCREATE INDEX idx_messages_reply_to ON messages(reply_to_id);\n\n-- Full-text search index\nCREATE INDEX idx_messages_search ON messages USING GIN(search_vector);\n\n-- Participants indexes\nCREATE INDEX idx_participants_conversation ON conversation_participants(conversation_id);\nCREATE INDEX idx_participants_participant ON conversation_participants(participant_id);\nCREATE INDEX idx_participants_role ON conversation_participants(role);\nCREATE INDEX idx_participants_online ON conversation_participants(is_online);\n\n-- Channels indexes\nCREATE INDEX idx_channels_conversation ON conversation_channels(conversation_id);\nCREATE INDEX idx_channels_type ON conversation_channels(type);\nCREATE INDEX idx_channels_enabled ON conversation_channels(enabled);\nCREATE INDEX idx_channels_sync_status ON conversation_channels(sync_status);\n\n-- Analytics indexes\nCREATE INDEX idx_analytics_date ON chat_analytics(date);\nCREATE INDEX idx_analytics_date_hour ON chat_analytics(date, hour);\n\n-- Typing indicators indexes (for cleanup)\nCREATE INDEX idx_typing_expires ON typing_indicators(expires_at);\nCREATE INDEX idx_typing_conversation ON typing_indicators(conversation_id);\n\n-- Webhook indexes\nCREATE INDEX idx_webhook_deliveries_config ON webhook_deliveries(webhook_config_id);\nCREATE INDEX idx_webhook_deliveries_created ON webhook_deliveries(created_at);\nCREATE INDEX idx_webhook_deliveries_success ON webhook_deliveries(success);\n\n-- Functions and triggers\n\n-- Update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Update search vector for messages\nCREATE OR REPLACE FUNCTION update_message_search_vector()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.search_vector := to_tsvector('english', COALESCE(NEW.content, ''));\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Update conversation message count and last message time\nCREATE OR REPLACE FUNCTION update_conversation_stats()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF TG_OP = 'INSERT' THEN\n        UPDATE conversations \n        SET \n            message_count = message_count + 1,\n            last_message_at = NEW.created_at,\n            updated_at = NOW()\n        WHERE id = NEW.conversation_id;\n        RETURN NEW;\n    ELSIF TG_OP = 'DELETE' THEN\n        UPDATE conversations \n        SET \n            message_count = GREATEST(0, message_count - 1),\n            updated_at = NOW()\n        WHERE id = OLD.conversation_id;\n        RETURN OLD;\n    END IF;\n    RETURN NULL;\nEND;\n$$ language 'plpgsql';\n\n-- Cleanup expired typing indicators\nCREATE OR REPLACE FUNCTION cleanup_expired_typing()\nRETURNS INTEGER AS $$\nDECLARE\n    deleted_count INTEGER;\nBEGIN\n    DELETE FROM typing_indicators WHERE expires_at < NOW();\n    GET DIAGNOSTICS deleted_count = ROW_COUNT;\n    RETURN deleted_count;\nEND;\n$$ language 'plpgsql';\n\n-- Triggers\n\n-- Auto-update timestamps\nCREATE TRIGGER trigger_conversations_updated_at\n    BEFORE UPDATE ON conversations\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER trigger_messages_updated_at\n    BEFORE UPDATE ON messages\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER trigger_conversation_channels_updated_at\n    BEFORE UPDATE ON conversation_channels\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER trigger_webhook_configs_updated_at\n    BEFORE UPDATE ON webhook_configs\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Auto-update search vector\nCREATE TRIGGER trigger_messages_search_vector\n    BEFORE INSERT OR UPDATE ON messages\n    FOR EACH ROW EXECUTE FUNCTION update_message_search_vector();\n\n-- Auto-update conversation stats\nCREATE TRIGGER trigger_conversation_stats_insert\n    AFTER INSERT ON messages\n    FOR EACH ROW EXECUTE FUNCTION update_conversation_stats();\n\nCREATE TRIGGER trigger_conversation_stats_delete\n    AFTER DELETE ON messages\n    FOR EACH ROW EXECUTE FUNCTION update_conversation_stats();\n\n-- Views for common queries\n\n-- Active conversations with latest message\nCREATE VIEW active_conversations AS\nSELECT \n    c.*,\n    m.content as last_message_content,\n    m.sender_name as last_message_sender,\n    m.created_at as last_message_time,\n    COUNT(DISTINCT p.id) as participant_count\nFROM conversations c\nLEFT JOIN messages m ON c.id = m.conversation_id \n    AND m.created_at = c.last_message_at\nLEFT JOIN conversation_participants p ON c.id = p.conversation_id \n    AND p.left_at IS NULL\nWHERE c.status IN ('new', 'open', 'waiting')\nGROUP BY c.id, m.content, m.sender_name, m.created_at\nORDER BY c.last_message_at DESC NULLS LAST;\n\n-- Message thread view\nCREATE VIEW message_threads AS\nSELECT \n    m.*,\n    parent.content as parent_content,\n    parent.sender_name as parent_sender,\n    COUNT(replies.id) as reply_count\nFROM messages m\nLEFT JOIN messages parent ON m.reply_to_id = parent.id\nLEFT JOIN messages replies ON m.id = replies.reply_to_id\nGROUP BY m.id, parent.content, parent.sender_name;\n\n-- Channel performance view\nCREATE VIEW channel_performance AS\nSELECT \n    channel,\n    COUNT(*) as total_messages,\n    COUNT(DISTINCT conversation_id) as conversations,\n    AVG(EXTRACT(EPOCH FROM (updated_at - created_at))) as avg_processing_time,\n    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_messages,\n    COUNT(CASE WHEN status IN ('delivered', 'read') THEN 1 END) as successful_messages\nFROM messages \nWHERE created_at >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY channel;\n\n-- Daily analytics summary\nCREATE VIEW daily_analytics AS\nSELECT \n    date,\n    SUM(total_conversations) as total_conversations,\n    SUM(new_conversations) as new_conversations,\n    SUM(resolved_conversations) as resolved_conversations,\n    SUM(total_messages) as total_messages,\n    AVG(avg_first_response_time) as avg_first_response_time,\n    AVG(avg_response_time) as avg_response_time,\n    AVG(avg_satisfaction_rating) as avg_satisfaction_rating\nFROM chat_analytics\nGROUP BY date\nORDER BY date DESC;\n\n-- Sample data for development\nINSERT INTO users (id, email, name, language, study_language) VALUES\n('550e8400-e29b-41d4-a716-446655440000', 'user@example.com', 'Test User', 'th', 'en'),\n('550e8400-e29b-41d4-a716-446655440001', 'agent@example.com', 'Support Agent', 'th', 'en');\n\nINSERT INTO conversations (id, title, user_id, status) VALUES\n('660e8400-e29b-41d4-a716-446655440000', 'Test Conversation', '550e8400-e29b-41d4-a716-446655440000', 'open');\n\nINSERT INTO conversation_participants (conversation_id, participant_id, name, role) VALUES\n('660e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440000', 'Test User', 'user'),\n('660e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440001', 'Support Agent', 'agent');\n\nINSERT INTO conversation_channels (conversation_id, type) VALUES\n('660e8400-e29b-41d4-a716-446655440000', 'app'),\n('660e8400-e29b-41d4-a716-446655440000', 'email');\n\n-- Comments for documentation\nCOMMENT ON TABLE conversations IS 'Main conversation/ticket tracking';\nCOMMENT ON TABLE messages IS 'All messages across all channels';\nCOMMENT ON TABLE conversation_participants IS 'Users and agents participating in conversations';\nCOMMENT ON TABLE conversation_channels IS 'Channel configurations per conversation';\nCOMMENT ON TABLE attachments IS 'File attachments with security scanning';\nCOMMENT ON TABLE webhook_configs IS 'Webhook endpoint configurations';\nCOMMENT ON TABLE webhook_deliveries IS 'Webhook delivery attempts and results';\nCOMMENT ON TABLE chat_analytics IS 'Aggregated analytics data for reporting';\n\nCOMMENT ON COLUMN messages.search_vector IS 'Full-text search vector for message content';\nCOMMENT ON COLUMN conversations.response_time_seconds IS 'Average response time for this conversation';\nCOMMENT ON COLUMN attachments.virus_scan_status IS 'Security scan status: pending, clean, infected';\n