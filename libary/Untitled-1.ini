// Saku Bilingual Dojo — EN/JP Learning App (Beginner → Expert)
// --------------------------------------------------------------
// • Single-file React component you can drop into any React app.
// • No external UI deps beyond Tailwind CSS (works fine without Tailwind too).
// • Tracks: English (EN), Japanese (JP)
// • Levels: Beginner, Intermediate, Advanced, Expert
// • Modes: Quiz (MCQ + Typing), Study (Flashcards-lite), Exam (mixed set)
// • Progress saved to localStorage; inline SVG chart for progress.
// • All teacher notes/explanations are in Thai for quick understanding.
// --------------------------------------------------------------

import React, { useEffect, useMemo, useRef, useState } from "react";

// ---------- Types ----------
type Track = "EN" | "JP";
type Level = "Beginner" | "Intermediate" | "Advanced" | "Expert";
type Mode = "Quiz" | "Study" | "Exam";

type MCQ = {
  id: string;
  type: "mcq";
  prompt: string;
  choices: string[];
  answerIndex: number;
  explanation?: string;
  note?: string;
};

type Typing = {
  id: string;
  type: "typing";
  prompt: string;
  accept: string[]; // normalized answers accepted
  placeholder?: string;
  explanation?: string;
};

export type Question = MCQ | Typing;

// ---------- Utilities ----------
const uid = () => Math.random().toString(36).slice(2, 10);

function normalize(s: string) {
  return (s || "")
    .toLowerCase()
    .trim()
    .replace(/[\u3000\s]+/g, " ") // collapse spaces incl. JP full-width space
    .replace(/[’'`]/g, "'");
}

function shuffle<T>(arr: T[]): T[] {
  const a = arr.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

// ---------- Question Bank ----------
// Notes: Explanations are Thai-first. Prompts use target-language where helpful.
// Keep the dataset compact but extensible; you can append to QUESTION_BANK easily.

const EN_BEGINNER: Question[] = [
  {
    id: uid(),
    type: "mcq",
    prompt: "Choose the correct sentence:",
    choices: [
      "I am a student.",
      "I is a student.",
      "I are a student."
    ],
    answerIndex: 0,
    explanation:
      "กริยา be จะผันตามประธาน: I → am, You/We/They → are, He/She/It → is"
  },
  {
    id: uid(),
    type: "mcq",
    prompt: "Fill the article: I have __ apple.",
    choices: ["a", "an", "the"],
    answerIndex: 1,
    explanation: "ใช้ an นำหน้าคำที่ขึ้นต้นด้วยเสียงสระ เช่น apple, orange"
  },
  {
    id: uid(),
    type: "typing",
    prompt: "พิมพ์คำทักทายภาษาอังกฤษแบบสุภาพ (ตัวอย่าง: hello):",
    accept: ["hello", "good morning", "good afternoon", "good evening"].map(
      normalize
    ),
    placeholder: "hello / good morning ...",
    explanation: "คำทักทายพื้นฐาน เช่น hello, good morning เป็นต้น"
  },
  {
    id: uid(),
    type: "mcq",
    prompt: "There __ two cats in the room.",
    choices: ["is", "are", "be"],
    answerIndex: 1,
    explanation: "ประธานพหูพจน์ (two cats) ใช้ are"
  }
];

const EN_INTERMEDIATE: Question[] = [
  {
    id: uid(),
    type: "mcq",
    prompt:
      "Choose the best option: I have lived here __ 2019.",
    choices: ["for", "since", "from"],
    answerIndex: 1,
    explanation:
      "Present perfect กับจุดเริ่มต้นในอดีตใช้ since + ปี/เดือน/เวลา; for ใช้กับช่วงเวลา (for 3 years)"
  },
  {
    id: uid(),
    type: "mcq",
    prompt: "Pick a natural phrasal verb: Please __ the lights.",
    choices: ["turn on", "open", "rise"],
    answerIndex: 0,
    explanation: "เปิดไฟ = turn on the lights"
  },
  {
    id: uid(),
    type: "typing",
    prompt: "พิมพ์ Past simple ของ go (ฉันไป):",
    accept: ["went"],
    explanation: "go → went → gone"
  }
];

const EN_ADVANCED: Question[] = [
  {
    id: uid(),
    type: "mcq",
    prompt:
      "If I __ more time, I would study linguistics.",
    choices: ["have", "had", "will have"],
    answerIndex: 1,
    explanation: "เงื่อนไขที่ 2 (เหตุการณ์สมมติปัจจุบัน/อนาคต) ใช้ past simple: had"
  },
  {
    id: uid(),
    type: "typing",
    prompt:
      "พิมพ์คำศัพท์ที่ใกล้เคียงความหมาย 'improve' (เช่น 'enhance') — 1 คำ:",
    accept: [
      "enhance",
      "refine",
      "better",
      "ameliorate",
      "upgrade"
    ].map(normalize),
    explanation: "คำพ้องความหมายของ improve มีหลายคำ ตัวอย่างเช่น enhance/refine"
  }
];

const EN_EXPERT: Question[] = [
  {
    id: uid(),
    type: "typing",
    prompt:
      "Rewrite in concise academic style: 'People are getting more aware of climate change.'",
    accept: [
      normalize("Public awareness of climate change is increasing."),
      normalize("Awareness of climate change is rising."),
      normalize("Climate-change awareness is increasing.")
    ],
    explanation:
      "โทนวิชาการนิยมกระชับ ชัดเจน และเลี่ยงภาษาพูด เช่น people are getting → awareness is increasing"
  },
  {
    id: uid(),
    type: "mcq",
    prompt: "Which collocation is most natural?",
    choices: [
      "strongly agree",
      "powerfully agree",
      "heavily agree"
    ],
    answerIndex: 0,
    explanation: "collocation ที่พบจริงบ่อยคือ strongly agree"
  }
];

// Japanese — include kana, romaji, and basic grammar
const JP_BEGINNER: Question[] = [
  {
    id: uid(),
    type: "mcq",
    prompt: "ฮิรางานะ 'あ' อ่านว่า...",
    choices: ["a", "i", "u"],
    answerIndex: 0,
    explanation: "あ = a, い = i, う = u"
  },
  {
    id: uid(),
    type: "typing",
    prompt: "เขียน 'ขอบคุณ' เป็นภาษาญี่ปุ่น (ฮิรางานะ/โรมาจิ):",
    accept: ["ありがとう", "arigatou", "arigato"].map(normalize),
    placeholder: "ありがとう / arigatou",
    explanation: "ありがとう (arigatou) = ขอบคุณ"
  },
  {
    id: uid(),
    type: "mcq",
    prompt: "สรรพนาม 'ฉัน' แบบทั่วไปคือ...",
    choices: ["わたし", "ぼく", "おれ"],
    answerIndex: 0,
    explanation:
      "わたし (watashi) เป็นกลาง/สุภาพ; ぼく (boku) ชายหนุ่มใช้ทั่วไป; おれ (ore) ลำลอง/ห้าว"
  }
];

const JP_INTERMEDIATE: Question[] = [
  {
    id: uid(),
    type: "mcq",
    prompt: "เลือกอนุภาคที่ถูกต้อง: 本__読みます。",
    choices: ["は", "を", "が"],
    answerIndex: 1,
    explanation: "กริยาอ่าน + กรรมตรง ใช้ を → 本を読みます"
  },
  {
    id: uid(),
    type: "typing",
    prompt: "รูป て ของ 食べる คืออะไร?",
    accept: ["たべて", "食べて", "tabete"].map(normalize),
    explanation: "食べる → 食べて (แทเบเตะ) ใช้เชื่อมประโยค/ขอร้อง"
  },
  {
    id: uid(),
    type: "mcq",
    prompt: "過去形ของ 行く คือ...",
    choices: ["いった", "いきた", "いったい"],
    answerIndex: 0,
    explanation: "行く → 行った (いく→いった)"
  }
];

const JP_ADVANCED: Question[] = [
  {
    id: uid(),
    type: "mcq",
    prompt: "เลือกคำที่สุภาพเทียบกับ 行く (ไป)",
    choices: ["参る (まいる)", "行かせる", "行かれる"],
    answerIndex: 0,
    explanation: "謙譲語 (ถ่อมตน) ของ 行く คือ 参る"
  },
  {
    id: uid(),
    type: "typing",
    prompt: "แปลงเป็นรูปสุภาพ: 明日 行く → (\u3000) ます",
    accept: ["いきます", "行きます", "ikimasu"].map(normalize),
    explanation: "รูปสุภาพ (ます形): 行く → 行きます"
  },
  {
    id: uid(),
    type: "mcq",
    prompt: "ความแตกต่าง は vs が ในประโยคแนะนำหัวข้อ/เน้นผู้กระทำ ข้อใดถูก",
    choices: [
      "は ชี้หัวข้อทั่วไป; が เน้นผู้กระทำ/สิ่งใหม่ในบริบท",
      "が ชี้หัวข้อทั่วไป; は เน้นผู้กระทำ",
      "เหมือนกัน"
    ],
    answerIndex: 0,
    explanation:
      "โดยกว้าง ๆ は = หัวข้อ/กรอบสนทนา, が = เน้น subject ใหม่/เฉพาะเจาะจง"
  }
];

const JP_EXPERT: Question[] = [
  {
    id: uid(),
    type: "typing",
    prompt:
      "Rewrite to 尊敬語 (ยกย่องคู่สนทนา): 先生は本を読む → 先生は本を(\u3000)。",
    accept: ["およみになります", "お読みになります"].map(normalize),
    explanation:
      "尊敬語: 動詞 การกระทำของผู้อื่น + お/ご + 連用形 + になる → お読みになります"
  },
  {
    id: uid(),
    type: "mcq",
    prompt:
      "เลือกสำนวนที่เป็นธรรมชาติ: よろしく__します。",
    choices: ["おねがい", "お願いいたし", "お願いします"],
    answerIndex: 2,
    explanation: "ธรรมชาติ/สุภาพทั่วไป: よろしくお願いします"
  }
];

const QUESTION_BANK: Record<Track, Record<Level, Question[]>> = {
  EN: {
    Beginner: EN_BEGINNER,
    Intermediate: EN_INTERMEDIATE,
    Advanced: EN_ADVANCED,
    Expert: EN_EXPERT
  },
  JP: {
    Beginner: JP_BEGINNER,
    Intermediate: JP_INTERMEDIATE,
    Advanced: JP_ADVANCED,
    Expert: JP_EXPERT
  }
};

const LEVELS: Level[] = ["Beginner", "Intermediate", "Advanced", "Expert"];

// ---------- Storage ----------
const LS_KEY = "saku-bilingual-dojo-progress-v1";

type ProgressEntry = {
  date: string; // ISO date
  track: Track;
  level: Level;
  scorePct: number; // 0..100
  total: number;
  correct: number;
};

function loadProgress(): ProgressEntry[] {
  try {
    const raw = localStorage.getItem(LS_KEY);
    return raw ? (JSON.parse(raw) as ProgressEntry[]) : [];
  } catch {
    return [];
  }
}

function saveProgress(entries: ProgressEntry[]) {
  localStorage.setItem(LS_KEY, JSON.stringify(entries));
}

// ---------- Main Component ----------
export default function SakuBilingualDojo() {
  const [track, setTrack] = useState<Track>("EN");
  const [level, setLevel] = useState<Level>("Beginner");
  const [mode, setMode] = useState<Mode>("Quiz");
  const [questions, setQuestions] = useState<Question[]>([]);
  const [index, setIndex] = useState(0);
  const [correct, setCorrect] = useState(0);
  const [finished, setFinished] = useState(false);
  const [reveal, setReveal] = useState(false);
  const [typingValue, setTypingValue] = useState("");
  const [history, setHistory] = useState<ProgressEntry[]>(loadProgress());
  const [customBank, setCustomBank] = useState<Question[]>(loadUserBank());
  const [useCustom, setUseCustom] = useState(true);

  const current = questions[index];

  useEffect(() => {
    // preload questions on mount
    startSession(track, level, mode);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  function startSession(t: Track, lv: Level, m: Mode) {
    const base = QUESTION_BANK[t][lv].slice();
    const extra = useCustom ? customBank.filter(f => (f as any)._t === t && (f as any)._l === lv) : [];

    let set: Question[] = [];
    if (m === "Quiz") {
      set = shuffle([...base, ...extra]).slice(0, Math.max(6, Math.min(12, base.length + extra.length)));
    } else if (m === "Study") {
      set = [...base, ...extra];
    } else {
      // Exam: mix across all levels for the chosen track
      const pool = LEVELS.flatMap(L => QUESTION_BANK[t][L]);
      set = shuffle([...pool, ...customBank.filter(f => (f as any)._t === t)]).slice(0, 20);
    }
    setQuestions(set);
    setIndex(0);
    setCorrect(0);
    setFinished(false);
    setReveal(false);
    setTypingValue("");
  }

  function answerMCQ(idx: number) {
    if (finished || !current || current.type !== "mcq") return;
    const ok = idx === current.answerIndex;
    if (ok) setCorrect(c => c + 1);
    setReveal(true);
    setTimeout(nextQuestion, ok ? 420 : 560);
  }

  function answerTyping() {
    if (!current || current.type !== "typing") return;
    const val = normalize(typingValue);
    const ok = current.accept.map(normalize).includes(val);
    if (ok) setCorrect(c => c + 1);
    setReveal(true);
    setTimeout(nextQuestion, ok ? 420 : 700);
  }

  function nextQuestion() {
    setReveal(false);
    setTypingValue("");
    if (index + 1 >= questions.length) {
      setFinished(true);
      const total = questions.length;
      const scorePct = total ? Math.round((correct / total) * 100) : 0;
      const entry: ProgressEntry = {
        date: new Date().toISOString(),
        track,
        level,
        scorePct,
        total,
        correct
      };
      const h = [...history, entry];
      setHistory(h);
      saveProgress(h);
      return;
    }
    setIndex(i => i + 1);
  }

  // ---------- Progress Chart (inline SVG sparkline) ----------
  const chartPoints = useMemo(() => {
    const data = history.slice(-20).map((d, i) => ({ x: i, y: d.scorePct }));
    const maxX = Math.max(1, data.length - 1);
    const maxY = 100;
    return data
      .map(p => {
        const x = (p.x / maxX) * 100;
        const y = 100 - (p.y / maxY) * 100;
        return `${x},${y}`;
      })
      .join(" ");
  }, [history]);

  // ---------- User bank (append your custom questions) ----------
  function loadUserBank(): Question[] {
    try {
      const raw = localStorage.getItem("saku-user-questions");
      return raw ? (JSON.parse(raw) as Question[]) : [];
    } catch {
      return [];
    }
  }

  function saveUserBank(qs: Question[]) {
    localStorage.setItem("saku-user-questions", JSON.stringify(qs));
  }

  const [addForm, setAddForm] = useState({
    t: "EN" as Track,
    l: "Beginner" as Level,
    kind: "mcq" as "mcq" | "typing",
    prompt: "",
    choiceA: "",
    choiceB: "",
    choiceC: "",
    answerIndex: 0,
    accept: "",
    explanation: ""
  });

  function addCustomQuestion() {
    if (!addForm.prompt.trim()) return;
    let q: Question;
    if (addForm.kind === "mcq") {
      q = {
        id: uid(),
        type: "mcq",
        prompt: addForm.prompt.trim(),
        choices: [addForm.choiceA, addForm.choiceB, addForm.choiceC].filter(Boolean),
        answerIndex: addForm.answerIndex,
        explanation: addForm.explanation.trim() || undefined
      };
    } else {
      q = {
        id: uid(),
        type: "typing",
        prompt: addForm.prompt.trim(),
        accept: addForm.accept
          .split(",")
          .map(s => s.trim())
          .filter(Boolean)
          .map(normalize),
        explanation: addForm.explanation.trim() || undefined
      };
    }
    // @ts-ignore annotate track/level for filtering
    (q as any)._t = addForm.t;
    // @ts-ignore
    (q as any)._l = addForm.l;
    const updated = [...customBank, q];
    setCustomBank(updated);
    saveUserBank(updated);
    // reset
    setAddForm({ ...addForm, prompt: "", choiceA: "", choiceB: "", choiceC: "", accept: "", explanation: "" });
  }

  function resetProgress() {
    setHistory([]);
    saveProgress([]);
  }

  // ---------- Render ----------
  return (
    <div className="min-h-screen w-full bg-slate-950 text-slate-100">
      {/* Header */}
      <header className="px-6 py-5 border-b border-slate-800 bg-gradient-to-b from-slate-900 to-slate-950">
        <div className="max-w-6xl mx-auto flex items-center justify-between gap-4">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold tracking-tight">
              Saku Bilingual Dojo <span className="text-indigo-400">EN/JP</span>
            </h1>
            <p className="text-slate-400 text-sm md:text-base">
              "ฝึกวันละน้อย แต่ต่อเนื่อง" — จากเริ่มต้นสู่เซียน ด้วยแบบทดสอบที่อธิบายเป็นภาษาไทย
            </p>
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={() => {
                resetProgress();
              }}
              className="px-3 py-2 rounded-xl bg-slate-800 hover:bg-slate-700 text-xs"
              title="ล้างประวัติคะแนน"
            >
              Reset Progress
            </button>
            <a
              className="px-3 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-500 text-xs"
              href={`data:text/json;charset=utf-8,${encodeURIComponent(
                JSON.stringify(history, null, 2)
              )}`}
              download="saku_bilingual_progress.json"
            >
              Export Progress
            </a>
          </div>
        </div>
      </header>

      {/* Controls */}
      <div className="max-w-6xl mx-auto px-6 pt-6 grid md:grid-cols-3 gap-4">
        <div className="p-4 rounded-2xl bg-slate-900 border border-slate-800">
          <p className="text-xs uppercase text-slate-400 mb-2">Track</p>
          <div className="flex gap-2">
            {(["EN", "JP"] as Track[]).map(t => (
              <button
                key={t}
                onClick={() => {
                  setTrack(t);
                  startSession(t, level, mode);
                }}
                className={
                  "flex-1 px-3 py-2 rounded-xl border " +
                  (track === t
                    ? "bg-indigo-600 border-indigo-500"
                    : "bg-slate-800 border-slate-700 hover:bg-slate-700")
                }
              >
                {t === "EN" ? "English" : "日本語"}
              </button>
            ))}
          </div>
        </div>

        <div className="p-4 rounded-2xl bg-slate-900 border border-slate-800">
          <p className="text-xs uppercase text-slate-400 mb-2">Level</p>
          <div className="grid grid-cols-2 gap-2">
            {LEVELS.map(l => (
              <button
                key={l}
                onClick={() => {
                  setLevel(l);
                  startSession(track, l, mode);
                }}
                className={
                  "px-3 py-2 rounded-xl border text-left " +
                  (level === l
                    ? "bg-indigo-600 border-indigo-500"
                    : "bg-slate-800 border-slate-700 hover:bg-slate-700")
                }
              >
                {l}
              </button>
            ))}
          </div>
        </div>

        <div className="p-4 rounded-2xl bg-slate-900 border border-slate-800">
          <p className="text-xs uppercase text-slate-400 mb-2">Mode</p>
          <div className="flex gap-2">
            {(["Quiz", "Study", "Exam"] as Mode[]).map(m => (
              <button
                key={m}
                onClick={() => {
                  setMode(m);
                  startSession(track, level, m);
                }}
                className={
                  "flex-1 px-3 py-2 rounded-xl border " +
                  (mode === m
                    ? "bg-indigo-600 border-indigo-500"
                    : "bg-slate-800 border-slate-700 hover:bg-slate-700")
                }
              >
                {m}
              </button>
            ))}
          </div>
          <label className="mt-3 flex items-center gap-2 text-xs text-slate-400">
            <input
              type="checkbox"
              checked={useCustom}
              onChange={e => setUseCustom(e.target.checked)}
            />
            รวมข้อที่เพิ่มเอง (Custom)
          </label>
        </div>
      </div>

      {/* Body */}
      <main className="max-w-6xl mx-auto px-6 py-6 grid lg:grid-cols-3 gap-6">
        {/* Quiz Panel */}
        <section className="lg:col-span-2 p-5 rounded-2xl bg-slate-900 border border-slate-800">
          {!finished ? (
            <div>
              <div className="flex items-center justify-between mb-3">
                <div className="text-sm text-slate-400">
                  ข้อ {Math.min(index + 1, questions.length)} / {questions.length} —
                  <span className="ml-2">ถูก {correct}</span>
                </div>
                <div className="text-xs text-slate-400">โหมด: {mode}</div>
              </div>

              {current ? (
                <div className="rounded-xl border border-slate-700 p-4 bg-slate-950/50">
                  <h3 className="text-lg font-semibold mb-3">
                    {current.prompt}
                  </h3>

                  {current.type === "mcq" ? (
                    <div className="grid gap-2">
                      {current.choices.map((c, i) => {
                        const isCorrect = i === current.answerIndex;
                        const isReveal = reveal;
                        const style = isReveal
                          ? isCorrect
                            ? "bg-emerald-700/30 border-emerald-500"
                            : "bg-rose-900/20 border-rose-500"
                          : "bg-slate-800 hover:bg-slate-700 border-slate-700";
                        return (
                          <button
                            key={i}
                            onClick={() => answerMCQ(i)}
                            className={`text-left px-4 py-3 rounded-xl border ${style}`}
                          >
                            {c}
                          </button>
                        );
                      })}
                    </div>
                  ) : (
                    <div>
                      <input
                        className="w-full px-3 py-2 rounded-xl bg-slate-800 border border-slate-700 focus:outline-none"
                        placeholder={(current as Typing).placeholder || "พิมพ์คำตอบ"}
                        value={typingValue}
                        onChange={e => setTypingValue(e.target.value)}
                        onKeyDown={e => e.key === "Enter" && answerTyping()}
                      />
                      <div className="mt-3 flex gap-2">
                        <button
                          onClick={answerTyping}
                          className="px-3 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-500"
                        >
                          ตอบ
                        </button>
                        <button
                          onClick={nextQuestion}
                          className="px-3 py-2 rounded-xl bg-slate-800 hover:bg-slate-700 border border-slate-700"
                        >
                          ข้าม
                        </button>
                      </div>
                    </div>
                  )}

                  {reveal && (
                    <div className="mt-3 p-3 rounded-xl bg-slate-800/70 border border-slate-700 text-sm">
                      <div className="font-semibold mb-1">คำอธิบาย</div>
                      <div>
                        {current.type === "mcq"
                          ? (current as MCQ).explanation || "—"
                          : (current as Typing).explanation || "—"}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-slate-400">กำลังโหลดข้อแบบฝึก...</div>
              )}
            </div>
          ) : (
            <ResultCard
              total={questions.length}
              correct={correct}
              onRetry={() => startSession(track, level, mode)}
              onNextLevel={() => {
                const idx = LEVELS.indexOf(level);
                const nxt = LEVELS[Math.min(LEVELS.length - 1, idx + 1)];
                setLevel(nxt);
                startSession(track, nxt, mode);
              }}
            />
          )}
        </section>

        {/* Right Panel */}
        <aside className="space-y-6">
          {/* Progress */}
          <div className="p-5 rounded-2xl bg-slate-900 border border-slate-800">
            <div className="flex items-center justify-between">
              <h4 className="font-semibold">สถิติความก้าวหน้า</h4>
              <span className="text-xs text-slate-400">ล่าสุด {history.length} ครั้ง</span>
            </div>
            <div className="mt-3 h-24 rounded-xl bg-slate-950/50 border border-slate-800 overflow-hidden">
              {history.length ? (
                <svg viewBox="0 0 100 100" preserveAspectRatio="none" className="w-full h-full">
                  <polyline
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="1.5"
                    points={chartPoints}
                  />
                </svg>
              ) : (
                <div className="h-full grid place-items-center text-slate-500 text-sm">
                  ยังไม่มีข้อมูล — ทำแบบทดสอบสักชุดสิ
                </div>
              )}
            </div>
            <div className="mt-3 text-xs text-slate-400">
              Tip: คะแนนจะถูกบันทึกอัตโนมัติหลังจบเซสชันทุกครั้ง
            </div>
          </div>

          {/* Custom Question Builder */}
          <div className="p-5 rounded-2xl bg-slate-900 border border-slate-800">
            <h4 className="font-semibold mb-2">เพิ่มข้อของชาเอง (Custom)</h4>
            <div className="grid grid-cols-2 gap-2 text-xs text-slate-300">
              <label className="col-span-1">Track
                <select
                  className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1"
                  value={addForm.t}
                  onChange={e => setAddForm({ ...addForm, t: e.target.value as Track })}
                >
                  <option value="EN">EN</option>
                  <option value="JP">JP</option>
                </select>
              </label>
              <label className="col-span-1">Level
                <select
                  className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1"
                  value={addForm.l}
                  onChange={e => setAddForm({ ...addForm, l: e.target.value as Level })}
                >
                  {LEVELS.map(L => (
                    <option key={L} value={L}>{L}</option>
                  ))}
                </select>
              </label>
              <label className="col-span-2">ชนิดคำถาม
                <select
                  className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1"
                  value={addForm.kind}
                  onChange={e => setAddForm({ ...addForm, kind: e.target.value as any })}
                >
                  <option value="mcq">MCQ (ตัวเลือก)</option>
                  <option value="typing">Typing (พิมพ์คำตอบ)</option>
                </select>
              </label>
              <label className="col-span-2">โจทย์/Prompt
                <textarea
                  className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1"
                  rows={2}
                  value={addForm.prompt}
                  onChange={e => setAddForm({ ...addForm, prompt: e.target.value })}
                />
              </label>

              {addForm.kind === "mcq" ? (
                <>
                  <label>ตัวเลือก A
                    <input className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1" value={addForm.choiceA} onChange={e => setAddForm({ ...addForm, choiceA: e.target.value })} />
                  </label>
                  <label>ตัวเลือก B
                    <input className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1" value={addForm.choiceB} onChange={e => setAddForm({ ...addForm, choiceB: e.target.value })} />
                  </label>
                  <label>ตัวเลือก C
                    <input className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1" value={addForm.choiceC} onChange={e => setAddForm({ ...addForm, choiceC: e.target.value })} />
                  </label>
                  <label>คำตอบถูก (index: 0,1,2)
                    <input type="number" min={0} max={2} className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1" value={addForm.answerIndex} onChange={e => setAddForm({ ...addForm, answerIndex: parseInt(e.target.value || "0", 10) })} />
                  </label>
                </>
              ) : (
                <label className="col-span-2">คำตอบที่รับได้ (คั่นด้วย , เช่น ありがとう,arigatou)
                  <input className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1" value={addForm.accept} onChange={e => setAddForm({ ...addForm, accept: e.target.value })} />
                </label>
              )}

              <label className="col-span-2">คำอธิบาย (ไทย)
                <textarea
                  className="mt-1 w-full bg-slate-800 border border-slate-700 rounded-lg px-2 py-1"
                  rows={2}
                  value={addForm.explanation}
                  onChange={e => setAddForm({ ...addForm, explanation: e.target.value })}
                />
              </label>
            </div>
            <div className="mt-3 flex gap-2">
              <button onClick={addCustomQuestion} className="px-3 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-500">เพิ่มข้อ</button>
              <button
                onClick={() => {
                  setCustomBank([]);
                  saveUserBank([]);
                }}
                className="px-3 py-2 rounded-xl bg-slate-800 hover:bg-slate-700 border border-slate-700"
              >
                ลบ Custom ทั้งหมด
              </button>
            </div>
          </div>

          {/* Tips */}
          <div className="p-5 rounded-2xl bg-slate-900 border border-slate-800 text-sm text-slate-300 space-y-2">
            <div className="font-semibold">เคล็ดลับ (Saku whisper)</div>
            <ul className="list-disc pl-5 space-y-1 text-slate-400">
              <li>ฝึกสั้น ๆ วันละ 10–15 นาที สม่ำเสมอ ชนะการซ้อมยาวแล้วหยุด</li>
              <li>ทำผิดได้ แต่อธิบายให้เข้าใจ แล้วลองใหม่ทันที</li>
              <li>สลับโหมด Quiz/Study/Exam เพื่อประเมินตัวเอง</li>
              <li>JP: ฝึกอ่านฮิรางานะ/คาตาคานะทุกวัน 1 แถว</li>
              <li>EN: ลองสรุปสิ่งที่เรียนเป็นภาษาอังกฤษ 3 บรรทัดหลังจบเซสชัน</li>
            </ul>
          </div>
        </aside>
      </main>

      {/* Footer */}
      <footer className="px-6 pb-8">
        <div className="max-w-6xl mx-auto text-xs text-slate-500">
          © {new Date().getFullYear()} Saku Dojo — Built with love for ชา. เติมคลังข้อสอบได้ไม่อั้นในแผง Custom.
        </div>
      </footer>
    </div>
  );
}

// ---------- Result Card ----------
function ResultCard({ total, correct, onRetry, onNextLevel }: {
  total: number;
  correct: number;
  onRetry: () => void;
  onNextLevel: () => void;
}) {
  const pct = total ? Math.round((correct / total) * 100) : 0;
  const tone = pct >= 80 ? "text-emerald-400" : pct >= 60 ? "text-amber-400" : "text-rose-400";
  return (
    <div className="rounded-2xl border border-slate-800 p-6 bg-slate-900">
      <h3 className="text-xl font-semibold mb-2">สรุปผล</h3>
      <div className="text-sm text-slate-400 mb-4">คะแนนรวม</div>
      <div className={`text-5xl font-black ${tone}`}>{pct}<span className="text-xl align-super">%</span></div>
      <div className="mt-2 text-slate-400">ถูก {correct} จาก {total} ข้อ</div>
      <div className="mt-5 flex gap-2">
        <button onClick={onRetry} className="px-4 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-500">ลองอีกครั้ง</button>
        <button onClick={onNextLevel} className="px-4 py-2 rounded-xl bg-slate-800 hover:bg-slate-700 border border-slate-700">ไปเลเวลถัดไป</button>
      </div>
      <p className="mt-4 text-sm text-slate-400">หมายเหตุ: คะแนนบันทึกอัตโนมัติแล้วในสถิติความก้าวหน้า</p>
    </div>
  );
}
